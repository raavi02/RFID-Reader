
Realterm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005658  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08005830  08005830  00015830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058dc  080058dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080058dc  080058dc  000158dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058e4  080058e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058e4  080058e4  000158e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058e8  080058e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080058ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  2000000c  080058f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  080058f8  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015661  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000264b  00000000  00000000  0003569d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00037ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  00038f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a39  00000000  00000000  0003a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c1d  00000000  00000000  00060ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdfd0  00000000  00000000  000756f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001736c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e88  00000000  00000000  00173718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005818 	.word	0x08005818

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005818 	.word	0x08005818

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <rfid_read_tag.4>:
  /* USER CODE BEGIN 2 */
  	  HAL_UART_Transmit(&huart2, "Hello\n\r", 10, 10);
//  	rfid_state = RFID_SET_IDLE;

  	void rfid_read_tag (void)
  	  {
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	f8c7 c004 	str.w	ip, [r7, #4]
  	  	rfid_read_tag_pending = 1;
 8000526:	4b04      	ldr	r3, [pc, #16]	; (8000538 <rfid_read_tag.4+0x1c>)
 8000528:	2201      	movs	r2, #1
 800052a:	701a      	strb	r2, [r3, #0]
  	  }
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	20000029 	.word	0x20000029

0800053c <main>:
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
int main(void)
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	603b      	str	r3, [r7, #0]
	HAL_Init();
 8000548:	f000 fd69 	bl	800101e <HAL_Init>
  SystemClock_Config();
 800054c:	f000 fa2a 	bl	80009a4 <SystemClock_Config>
  MX_GPIO_Init();
 8000550:	f000 fb6e 	bl	8000c30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000554:	f000 fb42 	bl	8000bdc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000558:	f000 faf4 	bl	8000b44 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800055c:	f000 fa62 	bl	8000a24 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000560:	f000 fa9e 	bl	8000aa0 <MX_TIM1_Init>
  	  HAL_UART_Transmit(&huart2, "Hello\n\r", 10, 10);
 8000564:	230a      	movs	r3, #10
 8000566:	220a      	movs	r2, #10
 8000568:	491e      	ldr	r1, [pc, #120]	; (80005e4 <main+0xa8>)
 800056a:	481f      	ldr	r0, [pc, #124]	; (80005e8 <main+0xac>)
 800056c:	f003 fee0 	bl	8004330 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */
//	  HAL_UART_Transmit(&huart2, "Hello\n\r", 10, 10);

  	  rfid_process();
 8000570:	463b      	mov	r3, r7
 8000572:	469c      	mov	ip, r3
 8000574:	f000 f8aa 	bl	80006cc <rfid_process.0>

  	  static uint8_t doing_read = 0;
  	  	uint8_t result;


  	  	if (!doing_read)
 8000578:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <main+0xb0>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d10e      	bne.n	800059e <main+0x62>
  	  	{
  	  		//-----------------------------------
  	  		//----- WAITING TO DO NEXT READ -----
  	  		//-----------------------------------
  	  		if (general_use_10ms_timer == 0)
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <main+0xb4>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d1f3      	bne.n	8000570 <main+0x34>
  	  		{
  	  			//----- START THE NEXT READ -----
  	  			rfid_read_tag();
 8000588:	463b      	mov	r3, r7
 800058a:	469c      	mov	ip, r3
 800058c:	f7ff ffc6 	bl	800051c <rfid_read_tag.4>

  	  			doing_read = 1;
 8000590:	4b16      	ldr	r3, [pc, #88]	; (80005ec <main+0xb0>)
 8000592:	2201      	movs	r2, #1
 8000594:	701a      	strb	r2, [r3, #0]
  	  			general_use_10ms_timer = 25;
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <main+0xb4>)
 8000598:	2219      	movs	r2, #25
 800059a:	801a      	strh	r2, [r3, #0]
 800059c:	e7e8      	b.n	8000570 <main+0x34>
  	  	else
  	  	{
  	  		//----------------------------------------
  	  		//----- WAITING FOR READ TO COMPLETE -----
  	  		//----------------------------------------
  	  		result = rfid_get_read_tag_result();
 800059e:	463b      	mov	r3, r7
 80005a0:	469c      	mov	ip, r3
 80005a2:	f000 f829 	bl	80005f8 <rfid_get_read_tag_result.5>
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
//	  	  		if (result == 0)
//	  	  			return;			//Not complete

  	  		if (result == 1)
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d10a      	bne.n	80005c6 <main+0x8a>
  	  		{
  	  			//----- VALID RFID TAG DETECTED -----
//	  	  			RED_LED_ON = 0;
//	  	  			GREEN_LED_ON = 1;
  	  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2104      	movs	r1, #4
 80005b4:	480f      	ldr	r0, [pc, #60]	; (80005f4 <main+0xb8>)
 80005b6:	f001 fb03 	bl	8001bc0 <HAL_GPIO_WritePin>
  	  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2108      	movs	r1, #8
 80005be:	480d      	ldr	r0, [pc, #52]	; (80005f4 <main+0xb8>)
 80005c0:	f001 fafe 	bl	8001bc0 <HAL_GPIO_WritePin>
 80005c4:	e009      	b.n	80005da <main+0x9e>
  	  		else
  	  		{
  	  			//----- READ ERROR - NO VALID TAG DETECTED -----
//	  	  			RED_LED_ON = 1;
//	  	  			GREEN_LED_ON = 0;
  	  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2104      	movs	r1, #4
 80005ca:	480a      	ldr	r0, [pc, #40]	; (80005f4 <main+0xb8>)
 80005cc:	f001 faf8 	bl	8001bc0 <HAL_GPIO_WritePin>
  	  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2108      	movs	r1, #8
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <main+0xb8>)
 80005d6:	f001 faf3 	bl	8001bc0 <HAL_GPIO_WritePin>
  	  		}
  	  		doing_read = 0;
 80005da:	4b04      	ldr	r3, [pc, #16]	; (80005ec <main+0xb0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
  {
 80005e0:	e7c6      	b.n	8000570 <main+0x34>
 80005e2:	bf00      	nop
 80005e4:	08005830 	.word	0x08005830
 80005e8:	200000ec 	.word	0x200000ec
 80005ec:	200001dc 	.word	0x200001dc
 80005f0:	2000002e 	.word	0x2000002e
 80005f4:	48000800 	.word	0x48000800

080005f8 <rfid_get_read_tag_result.5>:
  	    {
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	f8c7 c004 	str.w	ip, [r7, #4]
  	    	if ((rfid_read_tag_pending) || (rfid_state != RFID_IDLE))
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <rfid_get_read_tag_result.5+0x38>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d103      	bne.n	8000612 <rfid_get_read_tag_result.5+0x1a>
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <rfid_get_read_tag_result.5+0x3c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b02      	cmp	r3, #2
 8000610:	d001      	beq.n	8000616 <rfid_get_read_tag_result.5+0x1e>
  	    		return(0x00);
 8000612:	2300      	movs	r3, #0
 8000614:	e006      	b.n	8000624 <rfid_get_read_tag_result.5+0x2c>
  	    	if (rfid_read_tag_success)
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <rfid_get_read_tag_result.5+0x40>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <rfid_get_read_tag_result.5+0x2a>
  	    		return(0x01);				//Success
 800061e:	2301      	movs	r3, #1
 8000620:	e000      	b.n	8000624 <rfid_get_read_tag_result.5+0x2c>
  	    		return(0x81);				//Failed
 8000622:	2381      	movs	r3, #129	; 0x81
  	    }
 8000624:	4618      	mov	r0, r3
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	20000029 	.word	0x20000029
 8000634:	2000003b 	.word	0x2000003b
 8000638:	2000002a 	.word	0x2000002a

0800063c <rfid_tx_rx_byte.1>:
  	    {
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	460a      	mov	r2, r1
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	4613      	mov	r3, r2
 800064a:	71bb      	strb	r3, [r7, #6]
 800064c:	f8c7 c000 	str.w	ip, [r7]
  	    	uint8_t rx_data = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	73fb      	strb	r3, [r7, #15]
  	    	HAL_SPI_Transmit_IT(&hspi1, &tx_data, 1);
 8000654:	1dfb      	adds	r3, r7, #7
 8000656:	2201      	movs	r2, #1
 8000658:	4619      	mov	r1, r3
 800065a:	4809      	ldr	r0, [pc, #36]	; (8000680 <rfid_tx_rx_byte.1+0x44>)
 800065c:	f002 fb9a 	bl	8002d94 <HAL_SPI_Transmit_IT>
  	    	if (get_response == 1)
 8000660:	79bb      	ldrb	r3, [r7, #6]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d106      	bne.n	8000674 <rfid_tx_rx_byte.1+0x38>
  	    		 HAL_SPI_Receive_IT	(&hspi1,&rx_data,1);
 8000666:	f107 030f 	add.w	r3, r7, #15
 800066a:	2201      	movs	r2, #1
 800066c:	4619      	mov	r1, r3
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <rfid_tx_rx_byte.1+0x44>)
 8000670:	f002 fc1e 	bl	8002eb0 <HAL_SPI_Receive_IT>
  	    	return rx_data;
 8000674:	7bfb      	ldrb	r3, [r7, #15]
  	    }
 8000676:	4618      	mov	r0, r3
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000003c 	.word	0x2000003c

08000684 <rfid_start_read_tag.2>:
  	    {
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	f8c7 c004 	str.w	ip, [r7, #4]
  	  	  uint8_t tx_data  = 0x10;
 800068e:	2310      	movs	r3, #16
 8000690:	73fb      	strb	r3, [r7, #15]
  	  	  HAL_SPI_Transmit_IT(&hspi1, &tx_data, 1);
 8000692:	f107 030f 	add.w	r3, r7, #15
 8000696:	2201      	movs	r2, #1
 8000698:	4619      	mov	r1, r3
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <rfid_start_read_tag.2+0x24>)
 800069c:	f002 fb7a 	bl	8002d94 <HAL_SPI_Transmit_IT>
  	    }
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000003c 	.word	0x2000003c

080006ac <rfid_end_read_tag.3>:
  	    {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	f8c7 c004 	str.w	ip, [r7, #4]
  	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2108      	movs	r1, #8
 80006ba:	4803      	ldr	r0, [pc, #12]	; (80006c8 <rfid_end_read_tag.3+0x1c>)
 80006bc:	f001 fa80 	bl	8001bc0 <HAL_GPIO_WritePin>
  	    }
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	48000400 	.word	0x48000400

080006cc <rfid_process.0>:
  	          {
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4664      	mov	r4, ip
 80006d4:	f8c7 c004 	str.w	ip, [r7, #4]
  	          	switch (rfid_state)
 80006d8:	4ba3      	ldr	r3, [pc, #652]	; (8000968 <rfid_process.0+0x29c>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b05      	cmp	r3, #5
 80006de:	f200 813f 	bhi.w	8000960 <rfid_process.0+0x294>
 80006e2:	a201      	add	r2, pc, #4	; (adr r2, 80006e8 <rfid_process.0+0x1c>)
 80006e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e8:	08000701 	.word	0x08000701
 80006ec:	0800071b 	.word	0x0800071b
 80006f0:	0800076f 	.word	0x0800076f
 80006f4:	08000781 	.word	0x08000781
 80006f8:	080008a9 	.word	0x080008a9
 80006fc:	0800093b 	.word	0x0800093b
  	          	  		HAL_Delay(11);
 8000700:	200b      	movs	r0, #11
 8000702:	f000 fcfd 	bl	8001100 <HAL_Delay>
  	          	  		rfid_state = RFID_SET_IDLE;
 8000706:	4b98      	ldr	r3, [pc, #608]	; (8000968 <rfid_process.0+0x29c>)
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
  	          	  		HAL_UART_Transmit(&huart2, "Initialise\r\n", 15, 10);
 800070c:	230a      	movs	r3, #10
 800070e:	220f      	movs	r2, #15
 8000710:	4996      	ldr	r1, [pc, #600]	; (800096c <rfid_process.0+0x2a0>)
 8000712:	4897      	ldr	r0, [pc, #604]	; (8000970 <rfid_process.0+0x2a4>)
 8000714:	f003 fe0c 	bl	8004330 <HAL_UART_Transmit>
  	          	  		break;
 8000718:	e122      	b.n	8000960 <rfid_process.0+0x294>
  	          			HAL_UART_Transmit(&huart2, "Set Idle\r\n", 10, 10);
 800071a:	230a      	movs	r3, #10
 800071c:	220a      	movs	r2, #10
 800071e:	4995      	ldr	r1, [pc, #596]	; (8000974 <rfid_process.0+0x2a8>)
 8000720:	4893      	ldr	r0, [pc, #588]	; (8000970 <rfid_process.0+0x2a4>)
 8000722:	f003 fe05 	bl	8004330 <HAL_UART_Transmit>
  	          			rfid_gain = 2;									//Default to a gain value of 2 (g=500 - this is default).  Permitted values are 0, 1, 2 or 3.
 8000726:	4b94      	ldr	r3, [pc, #592]	; (8000978 <rfid_process.0+0x2ac>)
 8000728:	2202      	movs	r2, #2
 800072a:	701a      	strb	r2, [r3, #0]
  	          			rfid_tx_rx_byte(0x73, 0);
 800072c:	46a4      	mov	ip, r4
 800072e:	2100      	movs	r1, #0
 8000730:	2073      	movs	r0, #115	; 0x73
 8000732:	f7ff ff83 	bl	800063c <rfid_tx_rx_byte.1>
  	          			tx_data = 0x43 | (rfid_gain << 2);
 8000736:	4b90      	ldr	r3, [pc, #576]	; (8000978 <rfid_process.0+0x2ac>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	b25b      	sxtb	r3, r3
 800073e:	f043 0343 	orr.w	r3, r3, #67	; 0x43
 8000742:	b25b      	sxtb	r3, r3
 8000744:	73bb      	strb	r3, [r7, #14]
  	          			rfid_tx_rx_byte(tx_data, 0);
 8000746:	7bbb      	ldrb	r3, [r7, #14]
 8000748:	46a4      	mov	ip, r4
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff75 	bl	800063c <rfid_tx_rx_byte.1>
  	          			rfid_tx_rx_byte(0x6f, 0);
 8000752:	46a4      	mov	ip, r4
 8000754:	2100      	movs	r1, #0
 8000756:	206f      	movs	r0, #111	; 0x6f
 8000758:	f7ff ff70 	bl	800063c <rfid_tx_rx_byte.1>
  	          			rfid_tx_rx_byte(0x55, 0);
 800075c:	46a4      	mov	ip, r4
 800075e:	2100      	movs	r1, #0
 8000760:	2055      	movs	r0, #85	; 0x55
 8000762:	f7ff ff6b 	bl	800063c <rfid_tx_rx_byte.1>
  	          			rfid_state = RFID_IDLE;
 8000766:	4b80      	ldr	r3, [pc, #512]	; (8000968 <rfid_process.0+0x29c>)
 8000768:	2202      	movs	r2, #2
 800076a:	701a      	strb	r2, [r3, #0]
  	          			break;
 800076c:	e0f8      	b.n	8000960 <rfid_process.0+0x294>
  	          			if (rfid_read_tag_pending)
 800076e:	4b83      	ldr	r3, [pc, #524]	; (800097c <rfid_process.0+0x2b0>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	f000 80f1 	beq.w	800095a <rfid_process.0+0x28e>
  	          				rfid_state = RFID_READ_TAG;
 8000778:	4b7b      	ldr	r3, [pc, #492]	; (8000968 <rfid_process.0+0x29c>)
 800077a:	2203      	movs	r2, #3
 800077c:	701a      	strb	r2, [r3, #0]
  	          			break;
 800077e:	e0ec      	b.n	800095a <rfid_process.0+0x28e>
  	          				HAL_UART_Transmit(&huart2, "Read Tag\r\n", 10, 10);
 8000780:	230a      	movs	r3, #10
 8000782:	220a      	movs	r2, #10
 8000784:	497e      	ldr	r1, [pc, #504]	; (8000980 <rfid_process.0+0x2b4>)
 8000786:	487a      	ldr	r0, [pc, #488]	; (8000970 <rfid_process.0+0x2a4>)
 8000788:	f003 fdd2 	bl	8004330 <HAL_UART_Transmit>
  	          				rfid_tx_rx_byte(0x73, 0);
 800078c:	46a4      	mov	ip, r4
 800078e:	2100      	movs	r1, #0
 8000790:	2073      	movs	r0, #115	; 0x73
 8000792:	f7ff ff53 	bl	800063c <rfid_tx_rx_byte.1>
  	          				tx_data = 0x43 | (rfid_gain << 2);
 8000796:	4b78      	ldr	r3, [pc, #480]	; (8000978 <rfid_process.0+0x2ac>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	b25b      	sxtb	r3, r3
 800079e:	f043 0343 	orr.w	r3, r3, #67	; 0x43
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	73bb      	strb	r3, [r7, #14]
  	          				rfid_tx_rx_byte(tx_data, 0);
 80007a6:	7bbb      	ldrb	r3, [r7, #14]
 80007a8:	46a4      	mov	ip, r4
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff45 	bl	800063c <rfid_tx_rx_byte.1>
  	          				rfid_tx_rx_byte(0x50, 0);
 80007b2:	46a4      	mov	ip, r4
 80007b4:	2100      	movs	r1, #0
 80007b6:	2050      	movs	r0, #80	; 0x50
 80007b8:	f7ff ff40 	bl	800063c <rfid_tx_rx_byte.1>
  	          				rfid_tx_rx_byte(0x6b, 0);
 80007bc:	46a4      	mov	ip, r4
 80007be:	2100      	movs	r1, #0
 80007c0:	206b      	movs	r0, #107	; 0x6b
 80007c2:	f7ff ff3b 	bl	800063c <rfid_tx_rx_byte.1>
  	          				HAL_Delay(4);
 80007c6:	2004      	movs	r0, #4
 80007c8:	f000 fc9a 	bl	8001100 <HAL_Delay>
  	          				rfid_tx_rx_byte(0x68, 0);
 80007cc:	46a4      	mov	ip, r4
 80007ce:	2100      	movs	r1, #0
 80007d0:	2068      	movs	r0, #104	; 0x68
 80007d2:	f7ff ff33 	bl	800063c <rfid_tx_rx_byte.1>
  	          				HAL_Delay(1);
 80007d6:	2001      	movs	r0, #1
 80007d8:	f000 fc92 	bl	8001100 <HAL_Delay>
  	          				rfid_tx_rx_byte(0x60, 0);
 80007dc:	46a4      	mov	ip, r4
 80007de:	2100      	movs	r1, #0
 80007e0:	2060      	movs	r0, #96	; 0x60
 80007e2:	f7ff ff2b 	bl	800063c <rfid_tx_rx_byte.1>
  	          				response = rfid_tx_rx_byte(0x06, 1);
 80007e6:	46a4      	mov	ip, r4
 80007e8:	2101      	movs	r1, #1
 80007ea:	2006      	movs	r0, #6
 80007ec:	f7ff ff26 	bl	800063c <rfid_tx_rx_byte.1>
 80007f0:	4603      	mov	r3, r0
 80007f2:	737b      	strb	r3, [r7, #13]
  	          				if (response & 0x10)
 80007f4:	7b7b      	ldrb	r3, [r7, #13]
 80007f6:	f003 0310 	and.w	r3, r3, #16
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d009      	beq.n	8000812 <rfid_process.0+0x146>
  	          					HAL_UART_Transmit(&huart2, "Fail 1\r\n", 10, 10);
 80007fe:	230a      	movs	r3, #10
 8000800:	220a      	movs	r2, #10
 8000802:	4960      	ldr	r1, [pc, #384]	; (8000984 <rfid_process.0+0x2b8>)
 8000804:	485a      	ldr	r0, [pc, #360]	; (8000970 <rfid_process.0+0x2a4>)
 8000806:	f003 fd93 	bl	8004330 <HAL_UART_Transmit>
  	          					rfid_state = RFID_READ_FAIL;
 800080a:	4b57      	ldr	r3, [pc, #348]	; (8000968 <rfid_process.0+0x29c>)
 800080c:	2205      	movs	r2, #5
 800080e:	701a      	strb	r2, [r3, #0]
  	          					break;
 8000810:	e0a6      	b.n	8000960 <rfid_process.0+0x294>
  	          				t_ant = (uint16_t)rfid_tx_rx_byte(0x08, 1);
 8000812:	46a4      	mov	ip, r4
 8000814:	2101      	movs	r1, #1
 8000816:	2008      	movs	r0, #8
 8000818:	f7ff ff10 	bl	800063c <rfid_tx_rx_byte.1>
 800081c:	4603      	mov	r3, r0
 800081e:	817b      	strh	r3, [r7, #10]
  	          				t_ant <<= 1;							//Multiply by 2
 8000820:	897b      	ldrh	r3, [r7, #10]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	817b      	strh	r3, [r7, #10]
  	          				t_ant += RFID_T_OC;						//Add the Offset Compensation value
 8000826:	897b      	ldrh	r3, [r7, #10]
 8000828:	333f      	adds	r3, #63	; 0x3f
 800082a:	817b      	strh	r3, [r7, #10]
  	          				t_ant &= 0x3f;
 800082c:	897b      	ldrh	r3, [r7, #10]
 800082e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000832:	817b      	strh	r3, [r7, #10]
  	          				rfid_tx_rx_byte((0x80 | (uint8_t)t_ant), 0);
 8000834:	897b      	ldrh	r3, [r7, #10]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800083c:	b2db      	uxtb	r3, r3
 800083e:	46a4      	mov	ip, r4
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fefa 	bl	800063c <rfid_tx_rx_byte.1>
  	          				response = rfid_tx_rx_byte(0x02, 1);
 8000848:	46a4      	mov	ip, r4
 800084a:	2101      	movs	r1, #1
 800084c:	2002      	movs	r0, #2
 800084e:	f7ff fef5 	bl	800063c <rfid_tx_rx_byte.1>
 8000852:	4603      	mov	r3, r0
 8000854:	737b      	strb	r3, [r7, #13]
  	          				HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000856:	200a      	movs	r0, #10
 8000858:	f000 fd8d 	bl	8001376 <HAL_NVIC_EnableIRQ>
  	          				HAL_UART_Transmit(&huart2, response, 20, 10);
 800085c:	7b7b      	ldrb	r3, [r7, #13]
 800085e:	4619      	mov	r1, r3
 8000860:	230a      	movs	r3, #10
 8000862:	2214      	movs	r2, #20
 8000864:	4842      	ldr	r0, [pc, #264]	; (8000970 <rfid_process.0+0x2a4>)
 8000866:	f003 fd63 	bl	8004330 <HAL_UART_Transmit>
  	          				if (response != t_ant)
 800086a:	7b7b      	ldrb	r3, [r7, #13]
 800086c:	b29b      	uxth	r3, r3
 800086e:	897a      	ldrh	r2, [r7, #10]
 8000870:	429a      	cmp	r2, r3
 8000872:	d009      	beq.n	8000888 <rfid_process.0+0x1bc>
  	          					HAL_UART_Transmit(&huart2, "Fail 2\r\n", 10, 10);
 8000874:	230a      	movs	r3, #10
 8000876:	220a      	movs	r2, #10
 8000878:	4943      	ldr	r1, [pc, #268]	; (8000988 <rfid_process.0+0x2bc>)
 800087a:	483d      	ldr	r0, [pc, #244]	; (8000970 <rfid_process.0+0x2a4>)
 800087c:	f003 fd58 	bl	8004330 <HAL_UART_Transmit>
  	          					rfid_state = RFID_READ_FAIL;
 8000880:	4b39      	ldr	r3, [pc, #228]	; (8000968 <rfid_process.0+0x29c>)
 8000882:	2205      	movs	r2, #5
 8000884:	701a      	strb	r2, [r3, #0]
  	          					break;
 8000886:	e06b      	b.n	8000960 <rfid_process.0+0x294>
  	          				rfid_start_read_tag();
 8000888:	46a4      	mov	ip, r4
 800088a:	f7ff fefb 	bl	8000684 <rfid_start_read_tag.2>
  	          				rfid_state = RFID_READ_TAG_READING;
 800088e:	4b36      	ldr	r3, [pc, #216]	; (8000968 <rfid_process.0+0x29c>)
 8000890:	2204      	movs	r2, #4
 8000892:	701a      	strb	r2, [r3, #0]
  	          				rfid_capture_state = RFID_CAPTURE_INITIALISE;
 8000894:	4b3d      	ldr	r3, [pc, #244]	; (800098c <rfid_process.0+0x2c0>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
  	          				rfid_tries_count = 0;
 800089a:	4b3d      	ldr	r3, [pc, #244]	; (8000990 <rfid_process.0+0x2c4>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
  	          				HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80008a0:	200a      	movs	r0, #10
 80008a2:	f000 fd68 	bl	8001376 <HAL_NVIC_EnableIRQ>
  	          				break;
 80008a6:	e05b      	b.n	8000960 <rfid_process.0+0x294>
  	          				HAL_UART_Transmit(&huart2, "ReadTag Reading\r\n", 20, 10);
 80008a8:	230a      	movs	r3, #10
 80008aa:	2214      	movs	r2, #20
 80008ac:	4939      	ldr	r1, [pc, #228]	; (8000994 <rfid_process.0+0x2c8>)
 80008ae:	4830      	ldr	r0, [pc, #192]	; (8000970 <rfid_process.0+0x2a4>)
 80008b0:	f003 fd3e 	bl	8004330 <HAL_UART_Transmit>
  	          				if (rfid_capture_state == RFID_CAPTURE_SUCCESS)
 80008b4:	4b35      	ldr	r3, [pc, #212]	; (800098c <rfid_process.0+0x2c0>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d12a      	bne.n	8000912 <rfid_process.0+0x246>
  	          					rfid_end_read_tag();
 80008bc:	46a4      	mov	ip, r4
 80008be:	f7ff fef5 	bl	80006ac <rfid_end_read_tag.3>
  	          					for (count = 0; count < 10; count++)
 80008c2:	2300      	movs	r3, #0
 80008c4:	73fb      	strb	r3, [r7, #15]
 80008c6:	e017      	b.n	80008f8 <rfid_process.0+0x22c>
  	          						rfid_data_nibbles[count] += 0x30;
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	4a33      	ldr	r2, [pc, #204]	; (8000998 <rfid_process.0+0x2cc>)
 80008cc:	5cd2      	ldrb	r2, [r2, r3]
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	3230      	adds	r2, #48	; 0x30
 80008d2:	b2d1      	uxtb	r1, r2
 80008d4:	4a30      	ldr	r2, [pc, #192]	; (8000998 <rfid_process.0+0x2cc>)
 80008d6:	54d1      	strb	r1, [r2, r3]
  	          						if (rfid_data_nibbles[count] > 0x39)
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	4a2f      	ldr	r2, [pc, #188]	; (8000998 <rfid_process.0+0x2cc>)
 80008dc:	5cd3      	ldrb	r3, [r2, r3]
 80008de:	2b39      	cmp	r3, #57	; 0x39
 80008e0:	d907      	bls.n	80008f2 <rfid_process.0+0x226>
  	          							rfid_data_nibbles[count] += 0x07;
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	4a2c      	ldr	r2, [pc, #176]	; (8000998 <rfid_process.0+0x2cc>)
 80008e6:	5cd2      	ldrb	r2, [r2, r3]
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	3207      	adds	r2, #7
 80008ec:	b2d1      	uxtb	r1, r2
 80008ee:	4a2a      	ldr	r2, [pc, #168]	; (8000998 <rfid_process.0+0x2cc>)
 80008f0:	54d1      	strb	r1, [r2, r3]
  	          					for (count = 0; count < 10; count++)
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	3301      	adds	r3, #1
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	2b09      	cmp	r3, #9
 80008fc:	d9e4      	bls.n	80008c8 <rfid_process.0+0x1fc>
  	          					rfid_read_tag_success = 1;
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <rfid_process.0+0x2d0>)
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
  	          					rfid_read_tag_pending = 0;
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <rfid_process.0+0x2b0>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
  	          					rfid_state = RFID_SET_IDLE;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <rfid_process.0+0x29c>)
 800090c:	2201      	movs	r2, #1
 800090e:	701a      	strb	r2, [r3, #0]
  	          					break;
 8000910:	e026      	b.n	8000960 <rfid_process.0+0x294>
  	          				if (rfid_capture_state == RFID_CAPTURE_FAILED_GIVEN_UP)
 8000912:	4b1e      	ldr	r3, [pc, #120]	; (800098c <rfid_process.0+0x2c0>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b06      	cmp	r3, #6
 8000918:	d121      	bne.n	800095e <rfid_process.0+0x292>
  	          					rfid_end_read_tag();
 800091a:	46a4      	mov	ip, r4
 800091c:	f7ff fec6 	bl	80006ac <rfid_end_read_tag.3>
  	          					rfid_read_tag_success = 0;
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <rfid_process.0+0x2d0>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
  	          					rfid_read_tag_pending = 0;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <rfid_process.0+0x2b0>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
  	          					rfid_state = RFID_SET_IDLE;
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <rfid_process.0+0x29c>)
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
  	          					HAL_NVIC_DisableIRQ(EXTI4_IRQn);		//Ensure irq is disabled
 8000932:	200a      	movs	r0, #10
 8000934:	f000 fd2d 	bl	8001392 <HAL_NVIC_DisableIRQ>
  	          				break;
 8000938:	e011      	b.n	800095e <rfid_process.0+0x292>
  	          				HAL_UART_Transmit(&huart2, "Read Fail\r\n", 12, 10);
 800093a:	230a      	movs	r3, #10
 800093c:	220c      	movs	r2, #12
 800093e:	4918      	ldr	r1, [pc, #96]	; (80009a0 <rfid_process.0+0x2d4>)
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <rfid_process.0+0x2a4>)
 8000942:	f003 fcf5 	bl	8004330 <HAL_UART_Transmit>
  	          				rfid_read_tag_success = 0;
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <rfid_process.0+0x2d0>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
  	          				rfid_read_tag_pending = 0;
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <rfid_process.0+0x2b0>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
  	          				rfid_state = RFID_SET_IDLE;
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <rfid_process.0+0x29c>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
  	          				break;
 8000958:	e002      	b.n	8000960 <rfid_process.0+0x294>
  	          			break;
 800095a:	bf00      	nop
 800095c:	e000      	b.n	8000960 <rfid_process.0+0x294>
  	          				break;
 800095e:	bf00      	nop
  	          }
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bd90      	pop	{r4, r7, pc}
 8000968:	2000003b 	.word	0x2000003b
 800096c:	08005838 	.word	0x08005838
 8000970:	200000ec 	.word	0x200000ec
 8000974:	08005848 	.word	0x08005848
 8000978:	20000028 	.word	0x20000028
 800097c:	20000029 	.word	0x20000029
 8000980:	08005854 	.word	0x08005854
 8000984:	08005860 	.word	0x08005860
 8000988:	0800586c 	.word	0x0800586c
 800098c:	2000002b 	.word	0x2000002b
 8000990:	2000002c 	.word	0x2000002c
 8000994:	08005878 	.word	0x08005878
 8000998:	20000030 	.word	0x20000030
 800099c:	2000002a 	.word	0x2000002a
 80009a0:	0800588c 	.word	0x0800588c

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b094      	sub	sp, #80	; 0x50
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0318 	add.w	r3, r7, #24
 80009ae:	2238      	movs	r2, #56	; 0x38
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f004 ff28 	bl	8005808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009ca:	f001 f911 	bl	8001bf0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d8:	2340      	movs	r3, #64	; 0x40
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009dc:	2300      	movs	r3, #0
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e0:	f107 0318 	add.w	r3, r7, #24
 80009e4:	4618      	mov	r0, r3
 80009e6:	f001 f9a7 	bl	8001d38 <HAL_RCC_OscConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80009f0:	f000 f970 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f4:	230f      	movs	r3, #15
 80009f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009f8:	2301      	movs	r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 fcab 	bl	8002368 <HAL_RCC_ClockConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a18:	f000 f95c 	bl	8000cd4 <Error_Handler>
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	3750      	adds	r7, #80	; 0x50
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <MX_SPI1_Init+0x78>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a3e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a42:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a56:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a72:	2207      	movs	r2, #7
 8000a74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a7e:	2208      	movs	r2, #8
 8000a80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a84:	f002 f8da 	bl	8002c3c <HAL_SPI_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a8e:	f000 f921 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000003c 	.word	0x2000003c
 8000a9c:	40013000 	.word	0x40013000

08000aa0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa6:	f107 0310 	add.w	r3, r7, #16
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_TIM1_Init+0x9c>)
 8000ac0:	4a1f      	ldr	r2, [pc, #124]	; (8000b40 <MX_TIM1_Init+0xa0>)
 8000ac2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_TIM1_Init+0x9c>)
 8000ac6:	220f      	movs	r2, #15
 8000ac8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_TIM1_Init+0x9c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_TIM1_Init+0x9c>)
 8000ad2:	2231      	movs	r2, #49	; 0x31
 8000ad4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <MX_TIM1_Init+0x9c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MX_TIM1_Init+0x9c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_TIM1_Init+0x9c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ae8:	4814      	ldr	r0, [pc, #80]	; (8000b3c <MX_TIM1_Init+0x9c>)
 8000aea:	f003 f88a 	bl	8003c02 <HAL_TIM_Base_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000af4:	f000 f8ee 	bl	8000cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4619      	mov	r1, r3
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <MX_TIM1_Init+0x9c>)
 8000b06:	f003 f8d3 	bl	8003cb0 <HAL_TIM_ConfigClockSource>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b10:	f000 f8e0 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_TIM1_Init+0x9c>)
 8000b26:	f003 fb1d 	bl	8004164 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b30:	f000 f8d0 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3720      	adds	r7, #32
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200000a0 	.word	0x200000a0
 8000b40:	40012c00 	.word	0x40012c00

08000b44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b48:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b4a:	4a23      	ldr	r2, [pc, #140]	; (8000bd8 <MX_USART2_UART_Init+0x94>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b50:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8c:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b8e:	f003 fb7f 	bl	8004290 <HAL_UART_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b98:	f000 f89c 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000ba0:	f004 fd43 	bl	800562a <HAL_UARTEx_SetTxFifoThreshold>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000baa:	f000 f893 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000bb2:	f004 fd78 	bl	80056a6 <HAL_UARTEx_SetRxFifoThreshold>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000bbc:	f000 f88a 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000bc2:	f004 fcf9 	bl	80055b8 <HAL_UARTEx_DisableFifoMode>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bcc:	f000 f882 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200000ec 	.word	0x200000ec
 8000bd8:	40004400 	.word	0x40004400

08000bdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MX_DMA_Init+0x50>)
 8000be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000be6:	4a11      	ldr	r2, [pc, #68]	; (8000c2c <MX_DMA_Init+0x50>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	6493      	str	r3, [r2, #72]	; 0x48
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_DMA_Init+0x50>)
 8000bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_DMA_Init+0x50>)
 8000bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <MX_DMA_Init+0x50>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6493      	str	r3, [r2, #72]	; 0x48
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_DMA_Init+0x50>)
 8000c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	200b      	movs	r0, #11
 8000c18:	f000 fb93 	bl	8001342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c1c:	200b      	movs	r0, #11
 8000c1e:	f000 fbaa 	bl	8001376 <HAL_NVIC_EnableIRQ>

}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000

08000c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	f107 030c 	add.w	r3, r7, #12
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <MX_GPIO_Init+0x9c>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	4a20      	ldr	r2, [pc, #128]	; (8000ccc <MX_GPIO_Init+0x9c>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c52:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <MX_GPIO_Init+0x9c>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <MX_GPIO_Init+0x9c>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	4a1a      	ldr	r2, [pc, #104]	; (8000ccc <MX_GPIO_Init+0x9c>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <MX_GPIO_Init+0x9c>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <MX_GPIO_Init+0x9c>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <MX_GPIO_Init+0x9c>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c82:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <MX_GPIO_Init+0x9c>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	210c      	movs	r1, #12
 8000c92:	480f      	ldr	r0, [pc, #60]	; (8000cd0 <MX_GPIO_Init+0xa0>)
 8000c94:	f000 ff94 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c98:	230c      	movs	r3, #12
 8000c9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	4619      	mov	r1, r3
 8000cae:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <MX_GPIO_Init+0xa0>)
 8000cb0:	f000 fe04 	bl	80018bc <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Enable EXTI for MISO pin (PB4) */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	200a      	movs	r0, #10
 8000cba:	f000 fb42 	bl	8001342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000cbe:	200a      	movs	r0, #10
 8000cc0:	f000 fb59 	bl	8001376 <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc4:	bf00      	nop
 8000cc6:	3720      	adds	r7, #32
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	48000800 	.word	0x48000800

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <Error_Handler+0x8>
	...

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_MspInit+0x44>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <HAL_MspInit+0x44>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_MspInit+0x44>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_MspInit+0x44>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_MspInit+0x44>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_MspInit+0x44>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a1b      	ldr	r2, [pc, #108]	; (8000db4 <HAL_SPI_MspInit+0x8c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d12f      	bne.n	8000daa <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d4a:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <HAL_SPI_MspInit+0x90>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4e:	4a1a      	ldr	r2, [pc, #104]	; (8000db8 <HAL_SPI_MspInit+0x90>)
 8000d50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d54:	6613      	str	r3, [r2, #96]	; 0x60
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <HAL_SPI_MspInit+0x90>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_SPI_MspInit+0x90>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <HAL_SPI_MspInit+0x90>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_SPI_MspInit+0x90>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d7a:	2338      	movs	r3, #56	; 0x38
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4809      	ldr	r0, [pc, #36]	; (8000dbc <HAL_SPI_MspInit+0x94>)
 8000d96:	f000 fd91 	bl	80018bc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2023      	movs	r0, #35	; 0x23
 8000da0:	f000 facf 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000da4:	2023      	movs	r0, #35	; 0x23
 8000da6:	f000 fae6 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3728      	adds	r7, #40	; 0x28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40013000 	.word	0x40013000
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	48000400 	.word	0x48000400

08000dc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_TIM_Base_MspInit+0x38>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d10b      	bne.n	8000dea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_TIM_Base_MspInit+0x3c>)
 8000dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd6:	4a09      	ldr	r2, [pc, #36]	; (8000dfc <HAL_TIM_Base_MspInit+0x3c>)
 8000dd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ddc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <HAL_TIM_Base_MspInit+0x3c>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40012c00 	.word	0x40012c00
 8000dfc:	40021000 	.word	0x40021000

08000e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b09e      	sub	sp, #120	; 0x78
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	2254      	movs	r2, #84	; 0x54
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f004 fcf1 	bl	8005808 <memset>
  if(huart->Instance==USART2)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a37      	ldr	r2, [pc, #220]	; (8000f08 <HAL_UART_MspInit+0x108>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d167      	bne.n	8000f00 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 fcaf 	bl	80027a0 <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e48:	f7ff ff44 	bl	8000cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e4c:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <HAL_UART_MspInit+0x10c>)
 8000e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e50:	4a2e      	ldr	r2, [pc, #184]	; (8000f0c <HAL_UART_MspInit+0x10c>)
 8000e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e56:	6593      	str	r3, [r2, #88]	; 0x58
 8000e58:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <HAL_UART_MspInit+0x10c>)
 8000e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <HAL_UART_MspInit+0x10c>)
 8000e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e68:	4a28      	ldr	r2, [pc, #160]	; (8000f0c <HAL_UART_MspInit+0x10c>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e70:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <HAL_UART_MspInit+0x10c>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e7c:	230c      	movs	r3, #12
 8000e7e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e94:	4619      	mov	r1, r3
 8000e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9a:	f000 fd0f 	bl	80018bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_UART_MspInit+0x110>)
 8000ea0:	4a1c      	ldr	r2, [pc, #112]	; (8000f14 <HAL_UART_MspInit+0x114>)
 8000ea2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <HAL_UART_MspInit+0x110>)
 8000ea6:	221a      	movs	r2, #26
 8000ea8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_UART_MspInit+0x110>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <HAL_UART_MspInit+0x110>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <HAL_UART_MspInit+0x110>)
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <HAL_UART_MspInit+0x110>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <HAL_UART_MspInit+0x110>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_UART_MspInit+0x110>)
 8000eca:	2220      	movs	r2, #32
 8000ecc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <HAL_UART_MspInit+0x110>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ed4:	480e      	ldr	r0, [pc, #56]	; (8000f10 <HAL_UART_MspInit+0x110>)
 8000ed6:	f000 fa77 	bl	80013c8 <HAL_DMA_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8000ee0:	f7ff fef8 	bl	8000cd4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <HAL_UART_MspInit+0x110>)
 8000ee8:	67da      	str	r2, [r3, #124]	; 0x7c
 8000eea:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <HAL_UART_MspInit+0x110>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2026      	movs	r0, #38	; 0x26
 8000ef6:	f000 fa24 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000efa:	2026      	movs	r0, #38	; 0x26
 8000efc:	f000 fa3b 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	3778      	adds	r7, #120	; 0x78
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40004400 	.word	0x40004400
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	2000017c 	.word	0x2000017c
 8000f14:	40020008 	.word	0x40020008

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <NMI_Handler+0x4>

08000f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <BusFault_Handler+0x4>

08000f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <UsageFault_Handler+0x4>

08000f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f64:	f000 f8ae 	bl	80010c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <DMA1_Channel1_IRQHandler+0x10>)
 8000f72:	f000 fb91 	bl	8001698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000017c 	.word	0x2000017c

08000f80 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <SPI1_IRQHandler+0x10>)
 8000f86:	f002 f8f3 	bl	8003170 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000003c 	.word	0x2000003c

08000f94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <USART2_IRQHandler+0x10>)
 8000f9a:	f003 fa5f 	bl	800445c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200000ec 	.word	0x200000ec

08000fa8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fd2:	490e      	ldr	r1, [pc, #56]	; (800100c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fd4:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <LoopForever+0xe>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fd8:	e002      	b.n	8000fe0 <LoopCopyDataInit>

08000fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fde:	3304      	adds	r3, #4

08000fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe4:	d3f9      	bcc.n	8000fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fe8:	4c0b      	ldr	r4, [pc, #44]	; (8001018 <LoopForever+0x16>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fec:	e001      	b.n	8000ff2 <LoopFillZerobss>

08000fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff0:	3204      	adds	r2, #4

08000ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff4:	d3fb      	bcc.n	8000fee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ff6:	f7ff ffd7 	bl	8000fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f004 fbe1 	bl	80057c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ffe:	f7ff fa9d 	bl	800053c <main>

08001002 <LoopForever>:

LoopForever:
    b LoopForever
 8001002:	e7fe      	b.n	8001002 <LoopForever>
  ldr   r0, =_estack
 8001004:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001010:	080058ec 	.word	0x080058ec
  ldr r2, =_sbss
 8001014:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001018:	200001e4 	.word	0x200001e4

0800101c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC1_2_IRQHandler>

0800101e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001028:	2003      	movs	r0, #3
 800102a:	f000 f97f 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800102e:	200f      	movs	r0, #15
 8001030:	f000 f80e 	bl	8001050 <HAL_InitTick>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	71fb      	strb	r3, [r7, #7]
 800103e:	e001      	b.n	8001044 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001040:	f7ff fe4e 	bl	8000ce0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001044:	79fb      	ldrb	r3, [r7, #7]

}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <HAL_InitTick+0x68>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d022      	beq.n	80010aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001064:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_InitTick+0x6c>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <HAL_InitTick+0x68>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001070:	fbb1 f3f3 	udiv	r3, r1, r3
 8001074:	fbb2 f3f3 	udiv	r3, r2, r3
 8001078:	4618      	mov	r0, r3
 800107a:	f000 f998 	bl	80013ae <HAL_SYSTICK_Config>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10f      	bne.n	80010a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b0f      	cmp	r3, #15
 8001088:	d809      	bhi.n	800109e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108a:	2200      	movs	r2, #0
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	f04f 30ff 	mov.w	r0, #4294967295
 8001092:	f000 f956 	bl	8001342 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <HAL_InitTick+0x70>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	e007      	b.n	80010ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	73fb      	strb	r3, [r7, #15]
 80010a2:	e004      	b.n	80010ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e001      	b.n	80010ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20000000 	.word	0x20000000
 80010c0:	20000004 	.word	0x20000004

080010c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_IncTick+0x1c>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_IncTick+0x20>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a03      	ldr	r2, [pc, #12]	; (80010e0 <HAL_IncTick+0x1c>)
 80010d4:	6013      	str	r3, [r2, #0]
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	200001e0 	.word	0x200001e0
 80010e4:	20000008 	.word	0x20000008

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	200001e0 	.word	0x200001e0

08001100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001108:	f7ff ffee 	bl	80010e8 <HAL_GetTick>
 800110c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001118:	d004      	beq.n	8001124 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_Delay+0x40>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	4413      	add	r3, r2
 8001122:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001124:	bf00      	nop
 8001126:	f7ff ffdf 	bl	80010e8 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	429a      	cmp	r2, r3
 8001134:	d8f7      	bhi.n	8001126 <HAL_Delay+0x26>
  {
  }
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000008 	.word	0x20000008

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	; (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db12      	blt.n	800121c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	f003 021f 	and.w	r2, r3, #31
 80011fc:	490a      	ldr	r1, [pc, #40]	; (8001228 <__NVIC_DisableIRQ+0x44>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	2001      	movs	r0, #1
 8001206:	fa00 f202 	lsl.w	r2, r0, r2
 800120a:	3320      	adds	r3, #32
 800120c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001210:	f3bf 8f4f 	dsb	sy
}
 8001214:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001216:	f3bf 8f6f 	isb	sy
}
 800121a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	; (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	; (800127c <__NVIC_SetPriority+0x50>)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f7ff ff8e 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff05 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff1c 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff90 	bl	8001280 <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5f 	bl	800122c <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff0f 	bl	80011a8 <__NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff1f 	bl	80011e4 <__NVIC_DisableIRQ>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ff96 	bl	80012e8 <SysTick_Config>
 80013bc:	4603      	mov	r3, r0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e08d      	b.n	80014f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	4b47      	ldr	r3, [pc, #284]	; (8001500 <HAL_DMA_Init+0x138>)
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d80f      	bhi.n	8001406 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b45      	ldr	r3, [pc, #276]	; (8001504 <HAL_DMA_Init+0x13c>)
 80013ee:	4413      	add	r3, r2
 80013f0:	4a45      	ldr	r2, [pc, #276]	; (8001508 <HAL_DMA_Init+0x140>)
 80013f2:	fba2 2303 	umull	r2, r3, r2, r3
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	009a      	lsls	r2, r3, #2
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a42      	ldr	r2, [pc, #264]	; (800150c <HAL_DMA_Init+0x144>)
 8001402:	641a      	str	r2, [r3, #64]	; 0x40
 8001404:	e00e      	b.n	8001424 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	4b40      	ldr	r3, [pc, #256]	; (8001510 <HAL_DMA_Init+0x148>)
 800140e:	4413      	add	r3, r2
 8001410:	4a3d      	ldr	r2, [pc, #244]	; (8001508 <HAL_DMA_Init+0x140>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	009a      	lsls	r2, r3, #2
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a3c      	ldr	r2, [pc, #240]	; (8001514 <HAL_DMA_Init+0x14c>)
 8001422:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2202      	movs	r2, #2
 8001428:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800143a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800143e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001448:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001454:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001460:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	4313      	orrs	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f9be 	bl	80017f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001484:	d102      	bne.n	800148c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014a0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d010      	beq.n	80014cc <HAL_DMA_Init+0x104>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d80c      	bhi.n	80014cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f9de 	bl	8001874 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	e008      	b.n	80014de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40020407 	.word	0x40020407
 8001504:	bffdfff8 	.word	0xbffdfff8
 8001508:	cccccccd 	.word	0xcccccccd
 800150c:	40020000 	.word	0x40020000
 8001510:	bffdfbf8 	.word	0xbffdfbf8
 8001514:	40020400 	.word	0x40020400

08001518 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d005      	beq.n	800153c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2204      	movs	r2, #4
 8001534:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	73fb      	strb	r3, [r7, #15]
 800153a:	e037      	b.n	80015ac <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 020e 	bic.w	r2, r2, #14
 800154a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001556:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800155a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0201 	bic.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001570:	f003 021f 	and.w	r2, r3, #31
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	2101      	movs	r1, #1
 800157a:	fa01 f202 	lsl.w	r2, r1, r2
 800157e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001588:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00c      	beq.n	80015ac <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015a0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015aa:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d00d      	beq.n	80015fe <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2204      	movs	r2, #4
 80015e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e047      	b.n	800168e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 020e 	bic.w	r2, r2, #14
 800160c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800162c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f003 021f 	and.w	r2, r3, #31
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	2101      	movs	r1, #1
 800163c:	fa01 f202 	lsl.w	r2, r1, r2
 8001640:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800164a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00c      	beq.n	800166e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001662:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800166c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	4798      	blx	r3
    }
  }
  return status;
 800168e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	2204      	movs	r2, #4
 80016ba:	409a      	lsls	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d026      	beq.n	8001712 <HAL_DMA_IRQHandler+0x7a>
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d021      	beq.n	8001712 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0320 	and.w	r3, r3, #32
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d107      	bne.n	80016ec <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0204 	bic.w	r2, r2, #4
 80016ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	2104      	movs	r1, #4
 80016fa:	fa01 f202 	lsl.w	r2, r1, r2
 80016fe:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	2b00      	cmp	r3, #0
 8001706:	d071      	beq.n	80017ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001710:	e06c      	b.n	80017ec <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f003 031f 	and.w	r3, r3, #31
 800171a:	2202      	movs	r2, #2
 800171c:	409a      	lsls	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4013      	ands	r3, r2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d02e      	beq.n	8001784 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d029      	beq.n	8001784 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10b      	bne.n	8001756 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 020a 	bic.w	r2, r2, #10
 800174c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f003 021f 	and.w	r2, r3, #31
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	2102      	movs	r1, #2
 8001764:	fa01 f202 	lsl.w	r2, r1, r2
 8001768:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001776:	2b00      	cmp	r3, #0
 8001778:	d038      	beq.n	80017ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001782:	e033      	b.n	80017ec <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	2208      	movs	r2, #8
 800178e:	409a      	lsls	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4013      	ands	r3, r2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d02a      	beq.n	80017ee <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d025      	beq.n	80017ee <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 020e 	bic.w	r2, r2, #14
 80017b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f003 021f 	and.w	r2, r3, #31
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	2101      	movs	r1, #1
 80017c0:	fa01 f202 	lsl.w	r2, r1, r2
 80017c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d004      	beq.n	80017ee <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
}
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001808:	429a      	cmp	r2, r3
 800180a:	d802      	bhi.n	8001812 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	e001      	b.n	8001816 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001814:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	3b08      	subs	r3, #8
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001824:	fba2 2303 	umull	r2, r3, r2, r3
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	009a      	lsls	r2, r3, #2
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4413      	add	r3, r2
 8001838:	461a      	mov	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001842:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	2201      	movs	r2, #1
 800184c:	409a      	lsls	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001852:	bf00      	nop
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40020407 	.word	0x40020407
 8001864:	40020800 	.word	0x40020800
 8001868:	40020820 	.word	0x40020820
 800186c:	cccccccd 	.word	0xcccccccd
 8001870:	40020880 	.word	0x40020880

08001874 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	461a      	mov	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001896:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3b01      	subs	r3, #1
 800189c:	f003 031f 	and.w	r3, r3, #31
 80018a0:	2201      	movs	r2, #1
 80018a2:	409a      	lsls	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	1000823f 	.word	0x1000823f
 80018b8:	40020940 	.word	0x40020940

080018bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018ca:	e15a      	b.n	8001b82 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2101      	movs	r1, #1
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	fa01 f303 	lsl.w	r3, r1, r3
 80018d8:	4013      	ands	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 814c 	beq.w	8001b7c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d005      	beq.n	80018fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d130      	bne.n	800195e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2203      	movs	r2, #3
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001932:	2201      	movs	r2, #1
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	f003 0201 	and.w	r2, r3, #1
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	2b03      	cmp	r3, #3
 8001968:	d017      	beq.n	800199a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	2203      	movs	r2, #3
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d123      	bne.n	80019ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	08da      	lsrs	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3208      	adds	r2, #8
 80019ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	220f      	movs	r2, #15
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	08da      	lsrs	r2, r3, #3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3208      	adds	r2, #8
 80019e8:	6939      	ldr	r1, [r7, #16]
 80019ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0203 	and.w	r2, r3, #3
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 80a6 	beq.w	8001b7c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a30:	4b5b      	ldr	r3, [pc, #364]	; (8001ba0 <HAL_GPIO_Init+0x2e4>)
 8001a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a34:	4a5a      	ldr	r2, [pc, #360]	; (8001ba0 <HAL_GPIO_Init+0x2e4>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6613      	str	r3, [r2, #96]	; 0x60
 8001a3c:	4b58      	ldr	r3, [pc, #352]	; (8001ba0 <HAL_GPIO_Init+0x2e4>)
 8001a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a48:	4a56      	ldr	r2, [pc, #344]	; (8001ba4 <HAL_GPIO_Init+0x2e8>)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	089b      	lsrs	r3, r3, #2
 8001a4e:	3302      	adds	r3, #2
 8001a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	220f      	movs	r2, #15
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a72:	d01f      	beq.n	8001ab4 <HAL_GPIO_Init+0x1f8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a4c      	ldr	r2, [pc, #304]	; (8001ba8 <HAL_GPIO_Init+0x2ec>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d019      	beq.n	8001ab0 <HAL_GPIO_Init+0x1f4>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a4b      	ldr	r2, [pc, #300]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d013      	beq.n	8001aac <HAL_GPIO_Init+0x1f0>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a4a      	ldr	r2, [pc, #296]	; (8001bb0 <HAL_GPIO_Init+0x2f4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d00d      	beq.n	8001aa8 <HAL_GPIO_Init+0x1ec>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a49      	ldr	r2, [pc, #292]	; (8001bb4 <HAL_GPIO_Init+0x2f8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d007      	beq.n	8001aa4 <HAL_GPIO_Init+0x1e8>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a48      	ldr	r2, [pc, #288]	; (8001bb8 <HAL_GPIO_Init+0x2fc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d101      	bne.n	8001aa0 <HAL_GPIO_Init+0x1e4>
 8001a9c:	2305      	movs	r3, #5
 8001a9e:	e00a      	b.n	8001ab6 <HAL_GPIO_Init+0x1fa>
 8001aa0:	2306      	movs	r3, #6
 8001aa2:	e008      	b.n	8001ab6 <HAL_GPIO_Init+0x1fa>
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	e006      	b.n	8001ab6 <HAL_GPIO_Init+0x1fa>
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e004      	b.n	8001ab6 <HAL_GPIO_Init+0x1fa>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e002      	b.n	8001ab6 <HAL_GPIO_Init+0x1fa>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_GPIO_Init+0x1fa>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	f002 0203 	and.w	r2, r2, #3
 8001abc:	0092      	lsls	r2, r2, #2
 8001abe:	4093      	lsls	r3, r2
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ac6:	4937      	ldr	r1, [pc, #220]	; (8001ba4 <HAL_GPIO_Init+0x2e8>)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3302      	adds	r3, #2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ad4:	4b39      	ldr	r3, [pc, #228]	; (8001bbc <HAL_GPIO_Init+0x300>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001af8:	4a30      	ldr	r2, [pc, #192]	; (8001bbc <HAL_GPIO_Init+0x300>)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001afe:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <HAL_GPIO_Init+0x300>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b22:	4a26      	ldr	r2, [pc, #152]	; (8001bbc <HAL_GPIO_Init+0x300>)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_GPIO_Init+0x300>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b4c:	4a1b      	ldr	r2, [pc, #108]	; (8001bbc <HAL_GPIO_Init+0x300>)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <HAL_GPIO_Init+0x300>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b76:	4a11      	ldr	r2, [pc, #68]	; (8001bbc <HAL_GPIO_Init+0x300>)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f47f ae9d 	bne.w	80018cc <HAL_GPIO_Init+0x10>
  }
}
 8001b92:	bf00      	nop
 8001b94:	bf00      	nop
 8001b96:	371c      	adds	r7, #28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	48000400 	.word	0x48000400
 8001bac:	48000800 	.word	0x48000800
 8001bb0:	48000c00 	.word	0x48000c00
 8001bb4:	48001000 	.word	0x48001000
 8001bb8:	48001400 	.word	0x48001400
 8001bbc:	40010400 	.word	0x40010400

08001bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bde:	887a      	ldrh	r2, [r7, #2]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d141      	bne.n	8001c82 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bfe:	4b4b      	ldr	r3, [pc, #300]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0a:	d131      	bne.n	8001c70 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c0c:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c12:	4a46      	ldr	r2, [pc, #280]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c1c:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c24:	4a41      	ldr	r2, [pc, #260]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c2c:	4b40      	ldr	r3, [pc, #256]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2232      	movs	r2, #50	; 0x32
 8001c32:	fb02 f303 	mul.w	r3, r2, r3
 8001c36:	4a3f      	ldr	r2, [pc, #252]	; (8001d34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	0c9b      	lsrs	r3, r3, #18
 8001c3e:	3301      	adds	r3, #1
 8001c40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c42:	e002      	b.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c4a:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c56:	d102      	bne.n	8001c5e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f2      	bne.n	8001c44 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c5e:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c6a:	d158      	bne.n	8001d1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e057      	b.n	8001d20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c70:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c76:	4a2d      	ldr	r2, [pc, #180]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c80:	e04d      	b.n	8001d1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c88:	d141      	bne.n	8001d0e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c8a:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c96:	d131      	bne.n	8001cfc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c98:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c9e:	4a23      	ldr	r2, [pc, #140]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca8:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cb0:	4a1e      	ldr	r2, [pc, #120]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2232      	movs	r2, #50	; 0x32
 8001cbe:	fb02 f303 	mul.w	r3, r2, r3
 8001cc2:	4a1c      	ldr	r2, [pc, #112]	; (8001d34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc8:	0c9b      	lsrs	r3, r3, #18
 8001cca:	3301      	adds	r3, #1
 8001ccc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cce:	e002      	b.n	8001cd6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce2:	d102      	bne.n	8001cea <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f2      	bne.n	8001cd0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf6:	d112      	bne.n	8001d1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e011      	b.n	8001d20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d0c:	e007      	b.n	8001d1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d1c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	40007000 	.word	0x40007000
 8001d30:	20000000 	.word	0x20000000
 8001d34:	431bde83 	.word	0x431bde83

08001d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e306      	b.n	8002358 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d075      	beq.n	8001e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d56:	4b97      	ldr	r3, [pc, #604]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d60:	4b94      	ldr	r3, [pc, #592]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b0c      	cmp	r3, #12
 8001d6e:	d102      	bne.n	8001d76 <HAL_RCC_OscConfig+0x3e>
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d002      	beq.n	8001d7c <HAL_RCC_OscConfig+0x44>
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d10b      	bne.n	8001d94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	4b8d      	ldr	r3, [pc, #564]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d05b      	beq.n	8001e40 <HAL_RCC_OscConfig+0x108>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d157      	bne.n	8001e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e2e1      	b.n	8002358 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9c:	d106      	bne.n	8001dac <HAL_RCC_OscConfig+0x74>
 8001d9e:	4b85      	ldr	r3, [pc, #532]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a84      	ldr	r2, [pc, #528]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e01d      	b.n	8001de8 <HAL_RCC_OscConfig+0xb0>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x98>
 8001db6:	4b7f      	ldr	r3, [pc, #508]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a7e      	ldr	r2, [pc, #504]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b7c      	ldr	r3, [pc, #496]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a7b      	ldr	r2, [pc, #492]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e00b      	b.n	8001de8 <HAL_RCC_OscConfig+0xb0>
 8001dd0:	4b78      	ldr	r3, [pc, #480]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a77      	ldr	r2, [pc, #476]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b75      	ldr	r3, [pc, #468]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a74      	ldr	r2, [pc, #464]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7ff f97a 	bl	80010e8 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff f976 	bl	80010e8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e2a6      	b.n	8002358 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0a:	4b6a      	ldr	r3, [pc, #424]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0xc0>
 8001e16:	e014      	b.n	8001e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff f966 	bl	80010e8 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e20:	f7ff f962 	bl	80010e8 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	; 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e292      	b.n	8002358 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e32:	4b60      	ldr	r3, [pc, #384]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0xe8>
 8001e3e:	e000      	b.n	8001e42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d075      	beq.n	8001f3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e4e:	4b59      	ldr	r3, [pc, #356]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e58:	4b56      	ldr	r3, [pc, #344]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	2b0c      	cmp	r3, #12
 8001e66:	d102      	bne.n	8001e6e <HAL_RCC_OscConfig+0x136>
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d002      	beq.n	8001e74 <HAL_RCC_OscConfig+0x13c>
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d11f      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e74:	4b4f      	ldr	r3, [pc, #316]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_OscConfig+0x154>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e265      	b.n	8002358 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8c:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	061b      	lsls	r3, r3, #24
 8001e9a:	4946      	ldr	r1, [pc, #280]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ea0:	4b45      	ldr	r3, [pc, #276]	; (8001fb8 <HAL_RCC_OscConfig+0x280>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff f8d3 	bl	8001050 <HAL_InitTick>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d043      	beq.n	8001f38 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e251      	b.n	8002358 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d023      	beq.n	8001f04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ebc:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a3c      	ldr	r2, [pc, #240]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7ff f90e 	bl	80010e8 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed0:	f7ff f90a 	bl	80010e8 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e23a      	b.n	8002358 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee2:	4b34      	ldr	r3, [pc, #208]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eee:	4b31      	ldr	r3, [pc, #196]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	061b      	lsls	r3, r3, #24
 8001efc:	492d      	ldr	r1, [pc, #180]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
 8001f02:	e01a      	b.n	8001f3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f04:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a2a      	ldr	r2, [pc, #168]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001f0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7ff f8ea 	bl	80010e8 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f18:	f7ff f8e6 	bl	80010e8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e216      	b.n	8002358 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f2a:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x1e0>
 8001f36:	e000      	b.n	8001f3a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d041      	beq.n	8001fca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d01c      	beq.n	8001f88 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4e:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f54:	4a17      	ldr	r2, [pc, #92]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5e:	f7ff f8c3 	bl	80010e8 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f66:	f7ff f8bf 	bl	80010e8 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e1ef      	b.n	8002358 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f78:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0ef      	beq.n	8001f66 <HAL_RCC_OscConfig+0x22e>
 8001f86:	e020      	b.n	8001fca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8e:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7ff f8a6 	bl	80010e8 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f9e:	e00d      	b.n	8001fbc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7ff f8a2 	bl	80010e8 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d906      	bls.n	8001fbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1d2      	b.n	8002358 <HAL_RCC_OscConfig+0x620>
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fbc:	4b8c      	ldr	r3, [pc, #560]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 8001fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ea      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 80a6 	beq.w	8002124 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fdc:	4b84      	ldr	r3, [pc, #528]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_OscConfig+0x2b4>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <HAL_RCC_OscConfig+0x2b6>
 8001fec:	2300      	movs	r3, #0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00d      	beq.n	800200e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	4b7f      	ldr	r3, [pc, #508]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	4a7e      	ldr	r2, [pc, #504]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ffe:	4b7c      	ldr	r3, [pc, #496]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800200a:	2301      	movs	r3, #1
 800200c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800200e:	4b79      	ldr	r3, [pc, #484]	; (80021f4 <HAL_RCC_OscConfig+0x4bc>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d118      	bne.n	800204c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800201a:	4b76      	ldr	r3, [pc, #472]	; (80021f4 <HAL_RCC_OscConfig+0x4bc>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a75      	ldr	r2, [pc, #468]	; (80021f4 <HAL_RCC_OscConfig+0x4bc>)
 8002020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002026:	f7ff f85f 	bl	80010e8 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202e:	f7ff f85b 	bl	80010e8 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e18b      	b.n	8002358 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002040:	4b6c      	ldr	r3, [pc, #432]	; (80021f4 <HAL_RCC_OscConfig+0x4bc>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d108      	bne.n	8002066 <HAL_RCC_OscConfig+0x32e>
 8002054:	4b66      	ldr	r3, [pc, #408]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205a:	4a65      	ldr	r2, [pc, #404]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002064:	e024      	b.n	80020b0 <HAL_RCC_OscConfig+0x378>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b05      	cmp	r3, #5
 800206c:	d110      	bne.n	8002090 <HAL_RCC_OscConfig+0x358>
 800206e:	4b60      	ldr	r3, [pc, #384]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 8002070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002074:	4a5e      	ldr	r2, [pc, #376]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 8002076:	f043 0304 	orr.w	r3, r3, #4
 800207a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800207e:	4b5c      	ldr	r3, [pc, #368]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002084:	4a5a      	ldr	r2, [pc, #360]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800208e:	e00f      	b.n	80020b0 <HAL_RCC_OscConfig+0x378>
 8002090:	4b57      	ldr	r3, [pc, #348]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	4a56      	ldr	r2, [pc, #344]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a0:	4b53      	ldr	r3, [pc, #332]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a6:	4a52      	ldr	r2, [pc, #328]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 80020a8:	f023 0304 	bic.w	r3, r3, #4
 80020ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d016      	beq.n	80020e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b8:	f7ff f816 	bl	80010e8 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020be:	e00a      	b.n	80020d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c0:	f7ff f812 	bl	80010e8 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e140      	b.n	8002358 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d6:	4b46      	ldr	r3, [pc, #280]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 80020d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0ed      	beq.n	80020c0 <HAL_RCC_OscConfig+0x388>
 80020e4:	e015      	b.n	8002112 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e6:	f7fe ffff 	bl	80010e8 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ec:	e00a      	b.n	8002104 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ee:	f7fe fffb 	bl	80010e8 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e129      	b.n	8002358 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002104:	4b3a      	ldr	r3, [pc, #232]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1ed      	bne.n	80020ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002112:	7ffb      	ldrb	r3, [r7, #31]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d105      	bne.n	8002124 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002118:	4b35      	ldr	r3, [pc, #212]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 800211a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211c:	4a34      	ldr	r2, [pc, #208]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 800211e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002122:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b00      	cmp	r3, #0
 800212e:	d03c      	beq.n	80021aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01c      	beq.n	8002172 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002138:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 800213a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800213e:	4a2c      	ldr	r2, [pc, #176]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002148:	f7fe ffce 	bl	80010e8 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002150:	f7fe ffca 	bl	80010e8 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e0fa      	b.n	8002358 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002162:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 8002164:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0ef      	beq.n	8002150 <HAL_RCC_OscConfig+0x418>
 8002170:	e01b      	b.n	80021aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002172:	4b1f      	ldr	r3, [pc, #124]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 8002174:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002178:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002182:	f7fe ffb1 	bl	80010e8 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800218a:	f7fe ffad 	bl	80010e8 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e0dd      	b.n	8002358 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 800219e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1ef      	bne.n	800218a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 80d1 	beq.w	8002356 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	2b0c      	cmp	r3, #12
 80021be:	f000 808b 	beq.w	80022d8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d15e      	bne.n	8002288 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a08      	ldr	r2, [pc, #32]	; (80021f0 <HAL_RCC_OscConfig+0x4b8>)
 80021d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d6:	f7fe ff87 	bl	80010e8 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021dc:	e00c      	b.n	80021f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021de:	f7fe ff83 	bl	80010e8 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d905      	bls.n	80021f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e0b3      	b.n	8002358 <HAL_RCC_OscConfig+0x620>
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f8:	4b59      	ldr	r3, [pc, #356]	; (8002360 <HAL_RCC_OscConfig+0x628>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1ec      	bne.n	80021de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002204:	4b56      	ldr	r3, [pc, #344]	; (8002360 <HAL_RCC_OscConfig+0x628>)
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	4b56      	ldr	r3, [pc, #344]	; (8002364 <HAL_RCC_OscConfig+0x62c>)
 800220a:	4013      	ands	r3, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6a11      	ldr	r1, [r2, #32]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002214:	3a01      	subs	r2, #1
 8002216:	0112      	lsls	r2, r2, #4
 8002218:	4311      	orrs	r1, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800221e:	0212      	lsls	r2, r2, #8
 8002220:	4311      	orrs	r1, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002226:	0852      	lsrs	r2, r2, #1
 8002228:	3a01      	subs	r2, #1
 800222a:	0552      	lsls	r2, r2, #21
 800222c:	4311      	orrs	r1, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002232:	0852      	lsrs	r2, r2, #1
 8002234:	3a01      	subs	r2, #1
 8002236:	0652      	lsls	r2, r2, #25
 8002238:	4311      	orrs	r1, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800223e:	06d2      	lsls	r2, r2, #27
 8002240:	430a      	orrs	r2, r1
 8002242:	4947      	ldr	r1, [pc, #284]	; (8002360 <HAL_RCC_OscConfig+0x628>)
 8002244:	4313      	orrs	r3, r2
 8002246:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002248:	4b45      	ldr	r3, [pc, #276]	; (8002360 <HAL_RCC_OscConfig+0x628>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a44      	ldr	r2, [pc, #272]	; (8002360 <HAL_RCC_OscConfig+0x628>)
 800224e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002252:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002254:	4b42      	ldr	r3, [pc, #264]	; (8002360 <HAL_RCC_OscConfig+0x628>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a41      	ldr	r2, [pc, #260]	; (8002360 <HAL_RCC_OscConfig+0x628>)
 800225a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800225e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002260:	f7fe ff42 	bl	80010e8 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002268:	f7fe ff3e 	bl	80010e8 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e06e      	b.n	8002358 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227a:	4b39      	ldr	r3, [pc, #228]	; (8002360 <HAL_RCC_OscConfig+0x628>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0x530>
 8002286:	e066      	b.n	8002356 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002288:	4b35      	ldr	r3, [pc, #212]	; (8002360 <HAL_RCC_OscConfig+0x628>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a34      	ldr	r2, [pc, #208]	; (8002360 <HAL_RCC_OscConfig+0x628>)
 800228e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002292:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002294:	4b32      	ldr	r3, [pc, #200]	; (8002360 <HAL_RCC_OscConfig+0x628>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4a31      	ldr	r2, [pc, #196]	; (8002360 <HAL_RCC_OscConfig+0x628>)
 800229a:	f023 0303 	bic.w	r3, r3, #3
 800229e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022a0:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <HAL_RCC_OscConfig+0x628>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4a2e      	ldr	r2, [pc, #184]	; (8002360 <HAL_RCC_OscConfig+0x628>)
 80022a6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7fe ff1a 	bl	80010e8 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b8:	f7fe ff16 	bl	80010e8 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e046      	b.n	8002358 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ca:	4b25      	ldr	r3, [pc, #148]	; (8002360 <HAL_RCC_OscConfig+0x628>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x580>
 80022d6:	e03e      	b.n	8002356 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e039      	b.n	8002358 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <HAL_RCC_OscConfig+0x628>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f003 0203 	and.w	r2, r3, #3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d12c      	bne.n	8002352 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	3b01      	subs	r3, #1
 8002304:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d123      	bne.n	8002352 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d11b      	bne.n	8002352 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d113      	bne.n	8002352 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	085b      	lsrs	r3, r3, #1
 8002336:	3b01      	subs	r3, #1
 8002338:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d109      	bne.n	8002352 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002348:	085b      	lsrs	r3, r3, #1
 800234a:	3b01      	subs	r3, #1
 800234c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800234e:	429a      	cmp	r2, r3
 8002350:	d001      	beq.n	8002356 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3720      	adds	r7, #32
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40021000 	.word	0x40021000
 8002364:	019f800c 	.word	0x019f800c

08002368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e11e      	b.n	80025be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002380:	4b91      	ldr	r3, [pc, #580]	; (80025c8 <HAL_RCC_ClockConfig+0x260>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d910      	bls.n	80023b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238e:	4b8e      	ldr	r3, [pc, #568]	; (80025c8 <HAL_RCC_ClockConfig+0x260>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 020f 	bic.w	r2, r3, #15
 8002396:	498c      	ldr	r1, [pc, #560]	; (80025c8 <HAL_RCC_ClockConfig+0x260>)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	4b8a      	ldr	r3, [pc, #552]	; (80025c8 <HAL_RCC_ClockConfig+0x260>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e106      	b.n	80025be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d073      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d129      	bne.n	8002418 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c4:	4b81      	ldr	r3, [pc, #516]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0f4      	b.n	80025be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023d4:	f000 f99e 	bl	8002714 <RCC_GetSysClockFreqFromPLLSource>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4a7c      	ldr	r2, [pc, #496]	; (80025d0 <HAL_RCC_ClockConfig+0x268>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d93f      	bls.n	8002462 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023e2:	4b7a      	ldr	r3, [pc, #488]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d033      	beq.n	8002462 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d12f      	bne.n	8002462 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002402:	4b72      	ldr	r3, [pc, #456]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800240a:	4a70      	ldr	r2, [pc, #448]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 800240c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002410:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	e024      	b.n	8002462 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d107      	bne.n	8002430 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002420:	4b6a      	ldr	r3, [pc, #424]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d109      	bne.n	8002440 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0c6      	b.n	80025be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002430:	4b66      	ldr	r3, [pc, #408]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0be      	b.n	80025be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002440:	f000 f8ce 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8002444:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4a61      	ldr	r2, [pc, #388]	; (80025d0 <HAL_RCC_ClockConfig+0x268>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d909      	bls.n	8002462 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800244e:	4b5f      	ldr	r3, [pc, #380]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002456:	4a5d      	ldr	r2, [pc, #372]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800245c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002462:	4b5a      	ldr	r3, [pc, #360]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f023 0203 	bic.w	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	4957      	ldr	r1, [pc, #348]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002470:	4313      	orrs	r3, r2
 8002472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002474:	f7fe fe38 	bl	80010e8 <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247a:	e00a      	b.n	8002492 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247c:	f7fe fe34 	bl	80010e8 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f241 3288 	movw	r2, #5000	; 0x1388
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e095      	b.n	80025be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	4b4e      	ldr	r3, [pc, #312]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 020c 	and.w	r2, r3, #12
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d1eb      	bne.n	800247c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d023      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024bc:	4b43      	ldr	r3, [pc, #268]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4a42      	ldr	r2, [pc, #264]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 80024c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024d4:	4b3d      	ldr	r3, [pc, #244]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80024dc:	4a3b      	ldr	r2, [pc, #236]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 80024de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e4:	4b39      	ldr	r3, [pc, #228]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	4936      	ldr	r1, [pc, #216]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
 80024f6:	e008      	b.n	800250a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2b80      	cmp	r3, #128	; 0x80
 80024fc:	d105      	bne.n	800250a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024fe:	4b33      	ldr	r3, [pc, #204]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	4a32      	ldr	r2, [pc, #200]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002504:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002508:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800250a:	4b2f      	ldr	r3, [pc, #188]	; (80025c8 <HAL_RCC_ClockConfig+0x260>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d21d      	bcs.n	8002554 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002518:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <HAL_RCC_ClockConfig+0x260>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f023 020f 	bic.w	r2, r3, #15
 8002520:	4929      	ldr	r1, [pc, #164]	; (80025c8 <HAL_RCC_ClockConfig+0x260>)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002528:	f7fe fdde 	bl	80010e8 <HAL_GetTick>
 800252c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	e00a      	b.n	8002546 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002530:	f7fe fdda 	bl	80010e8 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f241 3288 	movw	r2, #5000	; 0x1388
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e03b      	b.n	80025be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <HAL_RCC_ClockConfig+0x260>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d1ed      	bne.n	8002530 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002560:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4917      	ldr	r1, [pc, #92]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 800256e:	4313      	orrs	r3, r2
 8002570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	490f      	ldr	r1, [pc, #60]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002592:	f000 f825 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8002596:	4602      	mov	r2, r0
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <HAL_RCC_ClockConfig+0x264>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	490c      	ldr	r1, [pc, #48]	; (80025d4 <HAL_RCC_ClockConfig+0x26c>)
 80025a4:	5ccb      	ldrb	r3, [r1, r3]
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	fa22 f303 	lsr.w	r3, r2, r3
 80025ae:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <HAL_RCC_ClockConfig+0x270>)
 80025b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025b2:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <HAL_RCC_ClockConfig+0x274>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fd4a 	bl	8001050 <HAL_InitTick>
 80025bc:	4603      	mov	r3, r0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40022000 	.word	0x40022000
 80025cc:	40021000 	.word	0x40021000
 80025d0:	04c4b400 	.word	0x04c4b400
 80025d4:	0800589c 	.word	0x0800589c
 80025d8:	20000000 	.word	0x20000000
 80025dc:	20000004 	.word	0x20000004

080025e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025e6:	4b2c      	ldr	r3, [pc, #176]	; (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d102      	bne.n	80025f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025f2:	4b2a      	ldr	r3, [pc, #168]	; (800269c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	e047      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025f8:	4b27      	ldr	r3, [pc, #156]	; (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d102      	bne.n	800260a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002604:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	e03e      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800260a:	4b23      	ldr	r3, [pc, #140]	; (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b0c      	cmp	r3, #12
 8002614:	d136      	bne.n	8002684 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002616:	4b20      	ldr	r3, [pc, #128]	; (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002620:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3301      	adds	r3, #1
 800262c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d10c      	bne.n	800264e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002634:	4a1a      	ldr	r2, [pc, #104]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	fbb2 f3f3 	udiv	r3, r2, r3
 800263c:	4a16      	ldr	r2, [pc, #88]	; (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 800263e:	68d2      	ldr	r2, [r2, #12]
 8002640:	0a12      	lsrs	r2, r2, #8
 8002642:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002646:	fb02 f303 	mul.w	r3, r2, r3
 800264a:	617b      	str	r3, [r7, #20]
      break;
 800264c:	e00c      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800264e:	4a13      	ldr	r2, [pc, #76]	; (800269c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	fbb2 f3f3 	udiv	r3, r2, r3
 8002656:	4a10      	ldr	r2, [pc, #64]	; (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002658:	68d2      	ldr	r2, [r2, #12]
 800265a:	0a12      	lsrs	r2, r2, #8
 800265c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002660:	fb02 f303 	mul.w	r3, r2, r3
 8002664:	617b      	str	r3, [r7, #20]
      break;
 8002666:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	0e5b      	lsrs	r3, r3, #25
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	3301      	adds	r3, #1
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	e001      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002688:	693b      	ldr	r3, [r7, #16]
}
 800268a:	4618      	mov	r0, r3
 800268c:	371c      	adds	r7, #28
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40021000 	.word	0x40021000
 800269c:	00f42400 	.word	0x00f42400
 80026a0:	007a1200 	.word	0x007a1200

080026a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026aa:	681b      	ldr	r3, [r3, #0]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000000 	.word	0x20000000

080026bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026c0:	f7ff fff0 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 80026c4:	4602      	mov	r2, r0
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	4904      	ldr	r1, [pc, #16]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026d2:	5ccb      	ldrb	r3, [r1, r3]
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000
 80026e4:	080058ac 	.word	0x080058ac

080026e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026ec:	f7ff ffda 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	0adb      	lsrs	r3, r3, #11
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	4904      	ldr	r1, [pc, #16]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000
 8002710:	080058ac 	.word	0x080058ac

08002714 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800271a:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002724:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	091b      	lsrs	r3, r3, #4
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	3301      	adds	r3, #1
 8002730:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	2b03      	cmp	r3, #3
 8002736:	d10c      	bne.n	8002752 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002738:	4a17      	ldr	r2, [pc, #92]	; (8002798 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002740:	4a14      	ldr	r2, [pc, #80]	; (8002794 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002742:	68d2      	ldr	r2, [r2, #12]
 8002744:	0a12      	lsrs	r2, r2, #8
 8002746:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800274a:	fb02 f303 	mul.w	r3, r2, r3
 800274e:	617b      	str	r3, [r7, #20]
    break;
 8002750:	e00c      	b.n	800276c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002752:	4a12      	ldr	r2, [pc, #72]	; (800279c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	fbb2 f3f3 	udiv	r3, r2, r3
 800275a:	4a0e      	ldr	r2, [pc, #56]	; (8002794 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800275c:	68d2      	ldr	r2, [r2, #12]
 800275e:	0a12      	lsrs	r2, r2, #8
 8002760:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002764:	fb02 f303 	mul.w	r3, r2, r3
 8002768:	617b      	str	r3, [r7, #20]
    break;
 800276a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800276c:	4b09      	ldr	r3, [pc, #36]	; (8002794 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	0e5b      	lsrs	r3, r3, #25
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	3301      	adds	r3, #1
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	fbb2 f3f3 	udiv	r3, r2, r3
 8002784:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002786:	687b      	ldr	r3, [r7, #4]
}
 8002788:	4618      	mov	r0, r3
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	40021000 	.word	0x40021000
 8002798:	007a1200 	.word	0x007a1200
 800279c:	00f42400 	.word	0x00f42400

080027a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027a8:	2300      	movs	r3, #0
 80027aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027ac:	2300      	movs	r3, #0
 80027ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8098 	beq.w	80028ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c2:	4b43      	ldr	r3, [pc, #268]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10d      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	4b40      	ldr	r3, [pc, #256]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	4a3f      	ldr	r2, [pc, #252]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d8:	6593      	str	r3, [r2, #88]	; 0x58
 80027da:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e6:	2301      	movs	r3, #1
 80027e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ea:	4b3a      	ldr	r3, [pc, #232]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a39      	ldr	r2, [pc, #228]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027f6:	f7fe fc77 	bl	80010e8 <HAL_GetTick>
 80027fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027fc:	e009      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fe:	f7fe fc73 	bl	80010e8 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d902      	bls.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	74fb      	strb	r3, [r7, #19]
        break;
 8002810:	e005      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002812:	4b30      	ldr	r3, [pc, #192]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0ef      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800281e:	7cfb      	ldrb	r3, [r7, #19]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d159      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002824:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800282e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d01e      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	429a      	cmp	r2, r3
 800283e:	d019      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002840:	4b23      	ldr	r3, [pc, #140]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800284a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800284c:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002852:	4a1f      	ldr	r2, [pc, #124]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800285c:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002862:	4a1b      	ldr	r2, [pc, #108]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800286c:	4a18      	ldr	r2, [pc, #96]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d016      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287e:	f7fe fc33 	bl	80010e8 <HAL_GetTick>
 8002882:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002884:	e00b      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe fc2f 	bl	80010e8 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	; 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d902      	bls.n	800289e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	74fb      	strb	r3, [r7, #19]
            break;
 800289c:	e006      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0ec      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10b      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028b2:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c0:	4903      	ldr	r1, [pc, #12]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028c8:	e008      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028ca:	7cfb      	ldrb	r3, [r7, #19]
 80028cc:	74bb      	strb	r3, [r7, #18]
 80028ce:	e005      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028dc:	7c7b      	ldrb	r3, [r7, #17]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d105      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e2:	4ba7      	ldr	r3, [pc, #668]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	4aa6      	ldr	r2, [pc, #664]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028fa:	4ba1      	ldr	r3, [pc, #644]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002900:	f023 0203 	bic.w	r2, r3, #3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	499d      	ldr	r1, [pc, #628]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00a      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800291c:	4b98      	ldr	r3, [pc, #608]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	f023 020c 	bic.w	r2, r3, #12
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4995      	ldr	r1, [pc, #596]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800293e:	4b90      	ldr	r3, [pc, #576]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002944:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	498c      	ldr	r1, [pc, #560]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002960:	4b87      	ldr	r3, [pc, #540]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002966:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	4984      	ldr	r1, [pc, #528]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002982:	4b7f      	ldr	r3, [pc, #508]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	497b      	ldr	r1, [pc, #492]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0320 	and.w	r3, r3, #32
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029a4:	4b76      	ldr	r3, [pc, #472]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	4973      	ldr	r1, [pc, #460]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029c6:	4b6e      	ldr	r3, [pc, #440]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	496a      	ldr	r1, [pc, #424]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029e8:	4b65      	ldr	r3, [pc, #404]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	4962      	ldr	r1, [pc, #392]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a0a:	4b5d      	ldr	r3, [pc, #372]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	4959      	ldr	r1, [pc, #356]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a2c:	4b54      	ldr	r3, [pc, #336]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a32:	f023 0203 	bic.w	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	4951      	ldr	r1, [pc, #324]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a4e:	4b4c      	ldr	r3, [pc, #304]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	4948      	ldr	r1, [pc, #288]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d015      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a70:	4b43      	ldr	r3, [pc, #268]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4940      	ldr	r1, [pc, #256]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a8e:	d105      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a90:	4b3b      	ldr	r3, [pc, #236]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4a3a      	ldr	r2, [pc, #232]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d015      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002aa8:	4b35      	ldr	r3, [pc, #212]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab6:	4932      	ldr	r1, [pc, #200]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ac6:	d105      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ac8:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	4a2c      	ldr	r2, [pc, #176]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ad2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d015      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ae0:	4b27      	ldr	r3, [pc, #156]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aee:	4924      	ldr	r1, [pc, #144]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002afe:	d105      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b00:	4b1f      	ldr	r3, [pc, #124]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4a1e      	ldr	r2, [pc, #120]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d015      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b18:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	4916      	ldr	r1, [pc, #88]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b36:	d105      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b38:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4a10      	ldr	r2, [pc, #64]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d019      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	4908      	ldr	r1, [pc, #32]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b6e:	d109      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4a02      	ldr	r2, [pc, #8]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b7a:	60d3      	str	r3, [r2, #12]
 8002b7c:	e002      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d015      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b90:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	4926      	ldr	r1, [pc, #152]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bae:	d105      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bb0:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4a20      	ldr	r2, [pc, #128]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d015      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd6:	4918      	ldr	r1, [pc, #96]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be6:	d105      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002be8:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d015      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c00:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0e:	490a      	ldr	r1, [pc, #40]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a04      	ldr	r2, [pc, #16]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40021000 	.word	0x40021000

08002c3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e09d      	b.n	8002d8a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d108      	bne.n	8002c68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c5e:	d009      	beq.n	8002c74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	61da      	str	r2, [r3, #28]
 8002c66:	e005      	b.n	8002c74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fe f84a 	bl	8000d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002caa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cb4:	d902      	bls.n	8002cbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	e002      	b.n	8002cc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002cca:	d007      	beq.n	8002cdc <HAL_SPI_Init+0xa0>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cd4:	d002      	beq.n	8002cdc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1e:	ea42 0103 	orr.w	r1, r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d26:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	0c1b      	lsrs	r3, r3, #16
 8002d38:	f003 0204 	and.w	r2, r3, #4
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d58:	ea42 0103 	orr.w	r1, r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69da      	ldr	r2, [r3, #28]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_SPI_Transmit_IT+0x20>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e072      	b.n	8002e9a <HAL_SPI_Transmit_IT+0x106>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <HAL_SPI_Transmit_IT+0x34>
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d102      	bne.n	8002dce <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dcc:	e060      	b.n	8002e90 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d002      	beq.n	8002de0 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002dde:	e057      	b.n	8002e90 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2203      	movs	r2, #3
 8002de4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	88fa      	ldrh	r2, [r7, #6]
 8002df8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	88fa      	ldrh	r2, [r7, #6]
 8002dfe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e24:	d903      	bls.n	8002e2e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4a1f      	ldr	r2, [pc, #124]	; (8002ea8 <HAL_SPI_Transmit_IT+0x114>)
 8002e2a:	651a      	str	r2, [r3, #80]	; 0x50
 8002e2c:	e002      	b.n	8002e34 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <HAL_SPI_Transmit_IT+0x118>)
 8002e32:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3c:	d10f      	bne.n	8002e5e <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8002e6c:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e78:	2b40      	cmp	r3, #64	; 0x40
 8002e7a:	d008      	beq.n	8002e8e <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	e000      	b.n	8002e90 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8002e8e:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	080036e3 	.word	0x080036e3
 8002eac:	0800369d 	.word	0x0800369d

08002eb0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d110      	bne.n	8002eec <HAL_SPI_Receive_IT+0x3c>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ed2:	d10b      	bne.n	8002eec <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f894 	bl	8003010 <HAL_SPI_TransmitReceive_IT>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	e089      	b.n	8003000 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_SPI_Receive_IT+0x4a>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e082      	b.n	8003000 <HAL_SPI_Receive_IT+0x150>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d002      	beq.n	8002f14 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f12:	e070      	b.n	8002ff6 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_SPI_Receive_IT+0x70>
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f24:	e067      	b.n	8002ff6 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2204      	movs	r2, #4
 8002f2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	88fa      	ldrh	r2, [r7, #6]
 8002f3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	88fa      	ldrh	r2, [r7, #6]
 8002f46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f6a:	d90b      	bls.n	8002f84 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f7a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4a22      	ldr	r2, [pc, #136]	; (8003008 <HAL_SPI_Receive_IT+0x158>)
 8002f80:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f82:	e00a      	b.n	8002f9a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f92:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4a1d      	ldr	r2, [pc, #116]	; (800300c <HAL_SPI_Receive_IT+0x15c>)
 8002f98:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa2:	d10f      	bne.n	8002fc4 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fb2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fc2:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002fd2:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b40      	cmp	r3, #64	; 0x40
 8002fe0:	d008      	beq.n	8002ff4 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	e000      	b.n	8002ff6 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8002ff4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	08003651 	.word	0x08003651
 800300c:	08003601 	.word	0x08003601

08003010 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_SPI_TransmitReceive_IT+0x20>
 800302c:	2302      	movs	r3, #2
 800302e:	e091      	b.n	8003154 <HAL_SPI_TransmitReceive_IT+0x144>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800303e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003046:	7dbb      	ldrb	r3, [r7, #22]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d00d      	beq.n	8003068 <HAL_SPI_TransmitReceive_IT+0x58>
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003052:	d106      	bne.n	8003062 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d102      	bne.n	8003062 <HAL_SPI_TransmitReceive_IT+0x52>
 800305c:	7dbb      	ldrb	r3, [r7, #22]
 800305e:	2b04      	cmp	r3, #4
 8003060:	d002      	beq.n	8003068 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8003062:	2302      	movs	r3, #2
 8003064:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003066:	e070      	b.n	800314a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_SPI_TransmitReceive_IT+0x6a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HAL_SPI_TransmitReceive_IT+0x6a>
 8003074:	887b      	ldrh	r3, [r7, #2]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800307e:	e064      	b.n	800314a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b04      	cmp	r3, #4
 800308a:	d003      	beq.n	8003094 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2205      	movs	r2, #5
 8003090:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	887a      	ldrh	r2, [r7, #2]
 80030a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	887a      	ldrh	r2, [r7, #2]
 80030aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	887a      	ldrh	r2, [r7, #2]
 80030b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	887a      	ldrh	r2, [r7, #2]
 80030be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030ca:	d906      	bls.n	80030da <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4a24      	ldr	r2, [pc, #144]	; (8003160 <HAL_SPI_TransmitReceive_IT+0x150>)
 80030d0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4a23      	ldr	r2, [pc, #140]	; (8003164 <HAL_SPI_TransmitReceive_IT+0x154>)
 80030d6:	651a      	str	r2, [r3, #80]	; 0x50
 80030d8:	e005      	b.n	80030e6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4a22      	ldr	r2, [pc, #136]	; (8003168 <HAL_SPI_TransmitReceive_IT+0x158>)
 80030de:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4a22      	ldr	r2, [pc, #136]	; (800316c <HAL_SPI_TransmitReceive_IT+0x15c>)
 80030e4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030ee:	d802      	bhi.n	80030f6 <HAL_SPI_TransmitReceive_IT+0xe6>
 80030f0:	887b      	ldrh	r3, [r7, #2]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d908      	bls.n	8003108 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	e007      	b.n	8003118 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003116:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003126:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003132:	2b40      	cmp	r3, #64	; 0x40
 8003134:	d008      	beq.n	8003148 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	e000      	b.n	800314a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8003148:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003152:	7dfb      	ldrb	r3, [r7, #23]
}
 8003154:	4618      	mov	r0, r3
 8003156:	371c      	adds	r7, #28
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	0800353b 	.word	0x0800353b
 8003164:	080035a1 	.word	0x080035a1
 8003168:	080033eb 	.word	0x080033eb
 800316c:	080034a9 	.word	0x080034a9

08003170 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	099b      	lsrs	r3, r3, #6
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10f      	bne.n	80031b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	099b      	lsrs	r3, r3, #6
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d004      	beq.n	80031b4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	4798      	blx	r3
    return;
 80031b2:	e0d7      	b.n	8003364 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_SPI_IRQHandler+0x66>
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	09db      	lsrs	r3, r3, #7
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d004      	beq.n	80031d6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4798      	blx	r3
    return;
 80031d4:	e0c6      	b.n	8003364 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	095b      	lsrs	r3, r3, #5
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10c      	bne.n	80031fc <HAL_SPI_IRQHandler+0x8c>
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	099b      	lsrs	r3, r3, #6
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 80b4 	beq.w	8003364 <HAL_SPI_IRQHandler+0x1f4>
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80ad 	beq.w	8003364 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	099b      	lsrs	r3, r3, #6
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d023      	beq.n	800325e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b03      	cmp	r3, #3
 8003220:	d011      	beq.n	8003246 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003226:	f043 0204 	orr.w	r2, r3, #4
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	e00b      	b.n	800325e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	693b      	ldr	r3, [r7, #16]
        return;
 800325c:	e082      	b.n	8003364 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d014      	beq.n	8003294 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326e:	f043 0201 	orr.w	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	0a1b      	lsrs	r3, r3, #8
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00c      	beq.n	80032ba <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a4:	f043 0208 	orr.w	r2, r3, #8
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80032ac:	2300      	movs	r3, #0
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d04f      	beq.n	8003362 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032d0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d104      	bne.n	80032ee <HAL_SPI_IRQHandler+0x17e>
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d034      	beq.n	8003358 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0203 	bic.w	r2, r2, #3
 80032fc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	2b00      	cmp	r3, #0
 8003304:	d011      	beq.n	800332a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	4a18      	ldr	r2, [pc, #96]	; (800336c <HAL_SPI_IRQHandler+0x1fc>)
 800330c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe f959 	bl	80015ca <HAL_DMA_Abort_IT>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003322:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332e:	2b00      	cmp	r3, #0
 8003330:	d016      	beq.n	8003360 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003336:	4a0d      	ldr	r2, [pc, #52]	; (800336c <HAL_SPI_IRQHandler+0x1fc>)
 8003338:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe f943 	bl	80015ca <HAL_DMA_Abort_IT>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003356:	e003      	b.n	8003360 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f827 	bl	80033ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800335e:	e000      	b.n	8003362 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003360:	bf00      	nop
    return;
 8003362:	bf00      	nop
  }
}
 8003364:	3720      	adds	r7, #32
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	080033c1 	.word	0x080033c1

08003370 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f7ff ffe5 	bl	80033ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80033e2:	bf00      	nop
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d923      	bls.n	8003446 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	b292      	uxth	r2, r2
 800340a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	1c9a      	adds	r2, r3, #2
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b02      	subs	r3, #2
 8003420:	b29a      	uxth	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b01      	cmp	r3, #1
 8003432:	d11f      	bne.n	8003474 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003442:	605a      	str	r2, [r3, #4]
 8003444:	e016      	b.n	8003474 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f103 020c 	add.w	r2, r3, #12
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	7812      	ldrb	r2, [r2, #0]
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10f      	bne.n	80034a0 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800348e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d102      	bne.n	80034a0 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fb00 	bl	8003aa0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d912      	bls.n	80034e0 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	881a      	ldrh	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	1c9a      	adds	r2, r3, #2
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b02      	subs	r3, #2
 80034d8:	b29a      	uxth	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034de:	e012      	b.n	8003506 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	330c      	adds	r3, #12
 80034ea:	7812      	ldrb	r2, [r2, #0]
 80034ec:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d110      	bne.n	8003532 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800351e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d102      	bne.n	8003532 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fab7 	bl	8003aa0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	b292      	uxth	r2, r2
 800354e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	1c9a      	adds	r2, r3, #2
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10f      	bne.n	8003598 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003586:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d102      	bne.n	8003598 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fa84 	bl	8003aa0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	881a      	ldrh	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	1c9a      	adds	r2, r3, #2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d110      	bne.n	80035f8 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035e4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d102      	bne.n	80035f8 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fa54 	bl	8003aa0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80035f8:	bf00      	nop
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f103 020c 	add.w	r2, r3, #12
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	7812      	ldrb	r2, [r2, #0]
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d102      	bne.n	8003648 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fa6e 	bl	8003b24 <SPI_CloseRx_ISR>
  }
}
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	b292      	uxth	r2, r2
 8003664:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	1c9a      	adds	r2, r3, #2
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d102      	bne.n	8003694 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fa48 	bl	8003b24 <SPI_CloseRx_ISR>
  }
}
 8003694:	bf00      	nop
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	330c      	adds	r3, #12
 80036ae:	7812      	ldrb	r2, [r2, #0]
 80036b0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fa55 	bl	8003b84 <SPI_CloseTx_ISR>
  }
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	881a      	ldrh	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	1c9a      	adds	r2, r3, #2
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003704:	b29b      	uxth	r3, r3
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d102      	bne.n	800371e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fa33 	bl	8003b84 <SPI_CloseTx_ISR>
  }
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	4613      	mov	r3, r2
 8003736:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003738:	f7fd fcd6 	bl	80010e8 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	4413      	add	r3, r2
 8003746:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003748:	f7fd fcce 	bl	80010e8 <HAL_GetTick>
 800374c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800374e:	4b39      	ldr	r3, [pc, #228]	; (8003834 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	015b      	lsls	r3, r3, #5
 8003754:	0d1b      	lsrs	r3, r3, #20
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	fb02 f303 	mul.w	r3, r2, r3
 800375c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800375e:	e054      	b.n	800380a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003766:	d050      	beq.n	800380a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003768:	f7fd fcbe 	bl	80010e8 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	429a      	cmp	r2, r3
 8003776:	d902      	bls.n	800377e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d13d      	bne.n	80037fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800378c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003796:	d111      	bne.n	80037bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037a0:	d004      	beq.n	80037ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037aa:	d107      	bne.n	80037bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c4:	d10f      	bne.n	80037e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e017      	b.n	800382a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	3b01      	subs	r3, #1
 8003808:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4013      	ands	r3, r2
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	429a      	cmp	r2, r3
 8003818:	bf0c      	ite	eq
 800381a:	2301      	moveq	r3, #1
 800381c:	2300      	movne	r3, #0
 800381e:	b2db      	uxtb	r3, r3
 8003820:	461a      	mov	r2, r3
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	429a      	cmp	r2, r3
 8003826:	d19b      	bne.n	8003760 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3720      	adds	r7, #32
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000000 	.word	0x20000000

08003838 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800384a:	f7fd fc4d 	bl	80010e8 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	4413      	add	r3, r2
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800385a:	f7fd fc45 	bl	80010e8 <HAL_GetTick>
 800385e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	330c      	adds	r3, #12
 8003866:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003868:	4b3d      	ldr	r3, [pc, #244]	; (8003960 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	00da      	lsls	r2, r3, #3
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	0d1b      	lsrs	r3, r3, #20
 8003878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387a:	fb02 f303 	mul.w	r3, r2, r3
 800387e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003880:	e060      	b.n	8003944 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003888:	d107      	bne.n	800389a <SPI_WaitFifoStateUntilTimeout+0x62>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d104      	bne.n	800389a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003898:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d050      	beq.n	8003944 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038a2:	f7fd fc21 	bl	80010e8 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d902      	bls.n	80038b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d13d      	bne.n	8003934 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038d0:	d111      	bne.n	80038f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038da:	d004      	beq.n	80038e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e4:	d107      	bne.n	80038f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038fe:	d10f      	bne.n	8003920 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800391e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e010      	b.n	8003956 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	3b01      	subs	r3, #1
 8003942:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	4013      	ands	r3, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	d196      	bne.n	8003882 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3728      	adds	r7, #40	; 0x28
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000000 	.word	0x20000000

08003964 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003978:	d111      	bne.n	800399e <SPI_EndRxTransaction+0x3a>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003982:	d004      	beq.n	800398e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398c:	d107      	bne.n	800399e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800399c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2200      	movs	r2, #0
 80039a6:	2180      	movs	r1, #128	; 0x80
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f7ff febd 	bl	8003728 <SPI_WaitFlagStateUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b8:	f043 0220 	orr.w	r2, r3, #32
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e023      	b.n	8003a0c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039cc:	d11d      	bne.n	8003a0a <SPI_EndRxTransaction+0xa6>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d6:	d004      	beq.n	80039e2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e0:	d113      	bne.n	8003a0a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff ff22 	bl	8003838 <SPI_WaitFifoStateUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039fe:	f043 0220 	orr.w	r2, r3, #32
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e000      	b.n	8003a0c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7ff ff03 	bl	8003838 <SPI_WaitFifoStateUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3c:	f043 0220 	orr.w	r2, r3, #32
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e027      	b.n	8003a98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2180      	movs	r1, #128	; 0x80
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f7ff fe68 	bl	8003728 <SPI_WaitFlagStateUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a62:	f043 0220 	orr.w	r2, r3, #32
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e014      	b.n	8003a98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f7ff fedc 	bl	8003838 <SPI_WaitFifoStateUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d007      	beq.n	8003a96 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8a:	f043 0220 	orr.w	r2, r3, #32
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e000      	b.n	8003a98 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003aa8:	f7fd fb1e 	bl	80010e8 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0220 	bic.w	r2, r2, #32
 8003abc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	2164      	movs	r1, #100	; 0x64
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff ffa6 	bl	8003a14 <SPI_EndRxTxTransaction>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad2:	f043 0220 	orr.w	r2, r3, #32
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d115      	bne.n	8003b0e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d107      	bne.n	8003afe <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff fc44 	bl	8003384 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003afc:	e00e      	b.n	8003b1c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff fc46 	bl	8003398 <HAL_SPI_TxRxCpltCallback>
}
 8003b0c:	e006      	b.n	8003b1c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff fc48 	bl	80033ac <HAL_SPI_ErrorCallback>
}
 8003b1c:	bf00      	nop
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b3a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003b3c:	f7fd fad4 	bl	80010e8 <HAL_GetTick>
 8003b40:	4603      	mov	r3, r0
 8003b42:	461a      	mov	r2, r3
 8003b44:	2164      	movs	r1, #100	; 0x64
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff ff0c 	bl	8003964 <SPI_EndRxTransaction>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b56:	f043 0220 	orr.w	r2, r3, #32
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d103      	bne.n	8003b76 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff fc08 	bl	8003384 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003b74:	e002      	b.n	8003b7c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff fc18 	bl	80033ac <HAL_SPI_ErrorCallback>
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b8c:	f7fd faac 	bl	80010e8 <HAL_GetTick>
 8003b90:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ba0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	2164      	movs	r1, #100	; 0x64
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7ff ff34 	bl	8003a14 <SPI_EndRxTxTransaction>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb6:	f043 0220 	orr.w	r2, r3, #32
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10a      	bne.n	8003bdc <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff fbdd 	bl	80033ac <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003bf2:	e002      	b.n	8003bfa <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff fbbb 	bl	8003370 <HAL_SPI_TxCpltCallback>
}
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e049      	b.n	8003ca8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d106      	bne.n	8003c2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7fd f8c9 	bl	8000dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2202      	movs	r2, #2
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4610      	mov	r0, r2
 8003c42:	f000 f94b 	bl	8003edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_TIM_ConfigClockSource+0x1c>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e0f6      	b.n	8003eba <HAL_TIM_ConfigClockSource+0x20a>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003cea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a6f      	ldr	r2, [pc, #444]	; (8003ec4 <HAL_TIM_ConfigClockSource+0x214>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	f000 80c1 	beq.w	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003d0c:	4a6d      	ldr	r2, [pc, #436]	; (8003ec4 <HAL_TIM_ConfigClockSource+0x214>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	f200 80c6 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d14:	4a6c      	ldr	r2, [pc, #432]	; (8003ec8 <HAL_TIM_ConfigClockSource+0x218>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	f000 80b9 	beq.w	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003d1c:	4a6a      	ldr	r2, [pc, #424]	; (8003ec8 <HAL_TIM_ConfigClockSource+0x218>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	f200 80be 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d24:	4a69      	ldr	r2, [pc, #420]	; (8003ecc <HAL_TIM_ConfigClockSource+0x21c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	f000 80b1 	beq.w	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003d2c:	4a67      	ldr	r2, [pc, #412]	; (8003ecc <HAL_TIM_ConfigClockSource+0x21c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	f200 80b6 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d34:	4a66      	ldr	r2, [pc, #408]	; (8003ed0 <HAL_TIM_ConfigClockSource+0x220>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	f000 80a9 	beq.w	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003d3c:	4a64      	ldr	r2, [pc, #400]	; (8003ed0 <HAL_TIM_ConfigClockSource+0x220>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	f200 80ae 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d44:	4a63      	ldr	r2, [pc, #396]	; (8003ed4 <HAL_TIM_ConfigClockSource+0x224>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	f000 80a1 	beq.w	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003d4c:	4a61      	ldr	r2, [pc, #388]	; (8003ed4 <HAL_TIM_ConfigClockSource+0x224>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	f200 80a6 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d54:	4a60      	ldr	r2, [pc, #384]	; (8003ed8 <HAL_TIM_ConfigClockSource+0x228>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	f000 8099 	beq.w	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003d5c:	4a5e      	ldr	r2, [pc, #376]	; (8003ed8 <HAL_TIM_ConfigClockSource+0x228>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	f200 809e 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d64:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003d68:	f000 8091 	beq.w	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003d6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003d70:	f200 8096 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d78:	f000 8089 	beq.w	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003d7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d80:	f200 808e 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d88:	d03e      	beq.n	8003e08 <HAL_TIM_ConfigClockSource+0x158>
 8003d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d8e:	f200 8087 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d96:	f000 8086 	beq.w	8003ea6 <HAL_TIM_ConfigClockSource+0x1f6>
 8003d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9e:	d87f      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003da0:	2b70      	cmp	r3, #112	; 0x70
 8003da2:	d01a      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x12a>
 8003da4:	2b70      	cmp	r3, #112	; 0x70
 8003da6:	d87b      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003da8:	2b60      	cmp	r3, #96	; 0x60
 8003daa:	d050      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x19e>
 8003dac:	2b60      	cmp	r3, #96	; 0x60
 8003dae:	d877      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003db0:	2b50      	cmp	r3, #80	; 0x50
 8003db2:	d03c      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x17e>
 8003db4:	2b50      	cmp	r3, #80	; 0x50
 8003db6:	d873      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003db8:	2b40      	cmp	r3, #64	; 0x40
 8003dba:	d058      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0x1be>
 8003dbc:	2b40      	cmp	r3, #64	; 0x40
 8003dbe:	d86f      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003dc0:	2b30      	cmp	r3, #48	; 0x30
 8003dc2:	d064      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003dc4:	2b30      	cmp	r3, #48	; 0x30
 8003dc6:	d86b      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d060      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d867      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d05c      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003dd4:	2b10      	cmp	r3, #16
 8003dd6:	d05a      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x1de>
 8003dd8:	e062      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6899      	ldr	r1, [r3, #8]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f000 f99b 	bl	8004124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	609a      	str	r2, [r3, #8]
      break;
 8003e06:	e04f      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	6899      	ldr	r1, [r3, #8]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f000 f984 	bl	8004124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e2a:	609a      	str	r2, [r3, #8]
      break;
 8003e2c:	e03c      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6859      	ldr	r1, [r3, #4]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f000 f8f6 	bl	800402c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2150      	movs	r1, #80	; 0x50
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f94f 	bl	80040ea <TIM_ITRx_SetConfig>
      break;
 8003e4c:	e02c      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	6859      	ldr	r1, [r3, #4]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f000 f915 	bl	800408a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2160      	movs	r1, #96	; 0x60
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 f93f 	bl	80040ea <TIM_ITRx_SetConfig>
      break;
 8003e6c:	e01c      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6859      	ldr	r1, [r3, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f000 f8d6 	bl	800402c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2140      	movs	r1, #64	; 0x40
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 f92f 	bl	80040ea <TIM_ITRx_SetConfig>
      break;
 8003e8c:	e00c      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4619      	mov	r1, r3
 8003e98:	4610      	mov	r0, r2
 8003e9a:	f000 f926 	bl	80040ea <TIM_ITRx_SetConfig>
      break;
 8003e9e:	e003      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea4:	e000      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003ea6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	00100070 	.word	0x00100070
 8003ec8:	00100060 	.word	0x00100060
 8003ecc:	00100050 	.word	0x00100050
 8003ed0:	00100040 	.word	0x00100040
 8003ed4:	00100030 	.word	0x00100030
 8003ed8:	00100020 	.word	0x00100020

08003edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a46      	ldr	r2, [pc, #280]	; (8004008 <TIM_Base_SetConfig+0x12c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d017      	beq.n	8003f24 <TIM_Base_SetConfig+0x48>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efa:	d013      	beq.n	8003f24 <TIM_Base_SetConfig+0x48>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a43      	ldr	r2, [pc, #268]	; (800400c <TIM_Base_SetConfig+0x130>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00f      	beq.n	8003f24 <TIM_Base_SetConfig+0x48>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a42      	ldr	r2, [pc, #264]	; (8004010 <TIM_Base_SetConfig+0x134>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00b      	beq.n	8003f24 <TIM_Base_SetConfig+0x48>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a41      	ldr	r2, [pc, #260]	; (8004014 <TIM_Base_SetConfig+0x138>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d007      	beq.n	8003f24 <TIM_Base_SetConfig+0x48>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a40      	ldr	r2, [pc, #256]	; (8004018 <TIM_Base_SetConfig+0x13c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d003      	beq.n	8003f24 <TIM_Base_SetConfig+0x48>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a3f      	ldr	r2, [pc, #252]	; (800401c <TIM_Base_SetConfig+0x140>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d108      	bne.n	8003f36 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a33      	ldr	r2, [pc, #204]	; (8004008 <TIM_Base_SetConfig+0x12c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d023      	beq.n	8003f86 <TIM_Base_SetConfig+0xaa>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f44:	d01f      	beq.n	8003f86 <TIM_Base_SetConfig+0xaa>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a30      	ldr	r2, [pc, #192]	; (800400c <TIM_Base_SetConfig+0x130>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01b      	beq.n	8003f86 <TIM_Base_SetConfig+0xaa>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a2f      	ldr	r2, [pc, #188]	; (8004010 <TIM_Base_SetConfig+0x134>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d017      	beq.n	8003f86 <TIM_Base_SetConfig+0xaa>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a2e      	ldr	r2, [pc, #184]	; (8004014 <TIM_Base_SetConfig+0x138>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d013      	beq.n	8003f86 <TIM_Base_SetConfig+0xaa>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a2d      	ldr	r2, [pc, #180]	; (8004018 <TIM_Base_SetConfig+0x13c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00f      	beq.n	8003f86 <TIM_Base_SetConfig+0xaa>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a2d      	ldr	r2, [pc, #180]	; (8004020 <TIM_Base_SetConfig+0x144>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00b      	beq.n	8003f86 <TIM_Base_SetConfig+0xaa>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a2c      	ldr	r2, [pc, #176]	; (8004024 <TIM_Base_SetConfig+0x148>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d007      	beq.n	8003f86 <TIM_Base_SetConfig+0xaa>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a2b      	ldr	r2, [pc, #172]	; (8004028 <TIM_Base_SetConfig+0x14c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d003      	beq.n	8003f86 <TIM_Base_SetConfig+0xaa>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a26      	ldr	r2, [pc, #152]	; (800401c <TIM_Base_SetConfig+0x140>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d108      	bne.n	8003f98 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a12      	ldr	r2, [pc, #72]	; (8004008 <TIM_Base_SetConfig+0x12c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d013      	beq.n	8003fec <TIM_Base_SetConfig+0x110>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a14      	ldr	r2, [pc, #80]	; (8004018 <TIM_Base_SetConfig+0x13c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00f      	beq.n	8003fec <TIM_Base_SetConfig+0x110>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a14      	ldr	r2, [pc, #80]	; (8004020 <TIM_Base_SetConfig+0x144>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00b      	beq.n	8003fec <TIM_Base_SetConfig+0x110>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a13      	ldr	r2, [pc, #76]	; (8004024 <TIM_Base_SetConfig+0x148>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d007      	beq.n	8003fec <TIM_Base_SetConfig+0x110>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a12      	ldr	r2, [pc, #72]	; (8004028 <TIM_Base_SetConfig+0x14c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d003      	beq.n	8003fec <TIM_Base_SetConfig+0x110>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a0d      	ldr	r2, [pc, #52]	; (800401c <TIM_Base_SetConfig+0x140>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d103      	bne.n	8003ff4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	615a      	str	r2, [r3, #20]
}
 8003ffa:	bf00      	nop
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40012c00 	.word	0x40012c00
 800400c:	40000400 	.word	0x40000400
 8004010:	40000800 	.word	0x40000800
 8004014:	40000c00 	.word	0x40000c00
 8004018:	40013400 	.word	0x40013400
 800401c:	40015000 	.word	0x40015000
 8004020:	40014000 	.word	0x40014000
 8004024:	40014400 	.word	0x40014400
 8004028:	40014800 	.word	0x40014800

0800402c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f023 0201 	bic.w	r2, r3, #1
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f023 030a 	bic.w	r3, r3, #10
 8004068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	621a      	str	r2, [r3, #32]
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800408a:	b480      	push	{r7}
 800408c:	b087      	sub	sp, #28
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	f023 0210 	bic.w	r2, r3, #16
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	031b      	lsls	r3, r3, #12
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	621a      	str	r2, [r3, #32]
}
 80040de:	bf00      	nop
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b085      	sub	sp, #20
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	f043 0307 	orr.w	r3, r3, #7
 8004110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	609a      	str	r2, [r3, #8]
}
 8004118:	bf00      	nop
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800413e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	021a      	lsls	r2, r3, #8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	431a      	orrs	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4313      	orrs	r3, r2
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	609a      	str	r2, [r3, #8]
}
 8004158:	bf00      	nop
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004178:	2302      	movs	r3, #2
 800417a:	e074      	b.n	8004266 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a34      	ldr	r2, [pc, #208]	; (8004274 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d009      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a33      	ldr	r2, [pc, #204]	; (8004278 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d004      	beq.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a31      	ldr	r2, [pc, #196]	; (800427c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d108      	bne.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80041c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80041d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a21      	ldr	r2, [pc, #132]	; (8004274 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d022      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fc:	d01d      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1f      	ldr	r2, [pc, #124]	; (8004280 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d018      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1d      	ldr	r2, [pc, #116]	; (8004284 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1c      	ldr	r2, [pc, #112]	; (8004288 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00e      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a15      	ldr	r2, [pc, #84]	; (8004278 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d009      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a18      	ldr	r2, [pc, #96]	; (800428c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d004      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a11      	ldr	r2, [pc, #68]	; (800427c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10c      	bne.n	8004254 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004240:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	4313      	orrs	r3, r2
 800424a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40013400 	.word	0x40013400
 800427c:	40015000 	.word	0x40015000
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800
 8004288:	40000c00 	.word	0x40000c00
 800428c:	40014000 	.word	0x40014000

08004290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e042      	b.n	8004328 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7fc fda3 	bl	8000e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2224      	movs	r2, #36	; 0x24
 80042be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0201 	bic.w	r2, r2, #1
 80042d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 fbfa 	bl	8004acc <UART_SetConfig>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e022      	b.n	8004328 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 feea 	bl	80050c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800430e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 ff71 	bl	8005208 <UART_CheckIdleState>
 8004326:	4603      	mov	r3, r0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08a      	sub	sp, #40	; 0x28
 8004334:	af02      	add	r7, sp, #8
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	4613      	mov	r3, r2
 800433e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004346:	2b20      	cmp	r3, #32
 8004348:	f040 8083 	bne.w	8004452 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <HAL_UART_Transmit+0x28>
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e07b      	b.n	8004454 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_UART_Transmit+0x3a>
 8004366:	2302      	movs	r3, #2
 8004368:	e074      	b.n	8004454 <HAL_UART_Transmit+0x124>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2221      	movs	r2, #33	; 0x21
 800437e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004382:	f7fc feb1 	bl	80010e8 <HAL_GetTick>
 8004386:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	88fa      	ldrh	r2, [r7, #6]
 8004394:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a0:	d108      	bne.n	80043b4 <HAL_UART_Transmit+0x84>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d104      	bne.n	80043b4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	e003      	b.n	80043bc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80043c4:	e02c      	b.n	8004420 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2200      	movs	r2, #0
 80043ce:	2180      	movs	r1, #128	; 0x80
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 ff64 	bl	800529e <UART_WaitOnFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e039      	b.n	8004454 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10b      	bne.n	80043fe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	3302      	adds	r3, #2
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	e007      	b.n	800440e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	781a      	ldrb	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	3301      	adds	r3, #1
 800440c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1cc      	bne.n	80043c6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2200      	movs	r2, #0
 8004434:	2140      	movs	r1, #64	; 0x40
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 ff31 	bl	800529e <UART_WaitOnFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e006      	b.n	8004454 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	e000      	b.n	8004454 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004452:	2302      	movs	r3, #2
  }
}
 8004454:	4618      	mov	r0, r3
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b0ba      	sub	sp, #232	; 0xe8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004482:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004486:	f640 030f 	movw	r3, #2063	; 0x80f
 800448a:	4013      	ands	r3, r2
 800448c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004490:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d11b      	bne.n	80044d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d015      	beq.n	80044d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80044a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044a8:	f003 0320 	and.w	r3, r3, #32
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d105      	bne.n	80044bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80044b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d009      	beq.n	80044d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 82d6 	beq.w	8004a72 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	4798      	blx	r3
      }
      return;
 80044ce:	e2d0      	b.n	8004a72 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80044d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 811f 	beq.w	8004718 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80044da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80044de:	4b8b      	ldr	r3, [pc, #556]	; (800470c <HAL_UART_IRQHandler+0x2b0>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80044e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80044ea:	4b89      	ldr	r3, [pc, #548]	; (8004710 <HAL_UART_IRQHandler+0x2b4>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 8112 	beq.w	8004718 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d011      	beq.n	8004524 <HAL_UART_IRQHandler+0xc8>
 8004500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00b      	beq.n	8004524 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2201      	movs	r2, #1
 8004512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800451a:	f043 0201 	orr.w	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d011      	beq.n	8004554 <HAL_UART_IRQHandler+0xf8>
 8004530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00b      	beq.n	8004554 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2202      	movs	r2, #2
 8004542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800454a:	f043 0204 	orr.w	r2, r3, #4
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d011      	beq.n	8004584 <HAL_UART_IRQHandler+0x128>
 8004560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00b      	beq.n	8004584 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2204      	movs	r2, #4
 8004572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800457a:	f043 0202 	orr.w	r2, r3, #2
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d017      	beq.n	80045c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b00      	cmp	r3, #0
 800459a:	d105      	bne.n	80045a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800459c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80045a0:	4b5a      	ldr	r3, [pc, #360]	; (800470c <HAL_UART_IRQHandler+0x2b0>)
 80045a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00b      	beq.n	80045c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2208      	movs	r2, #8
 80045ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045b6:	f043 0208 	orr.w	r2, r3, #8
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80045c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d012      	beq.n	80045f2 <HAL_UART_IRQHandler+0x196>
 80045cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00c      	beq.n	80045f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e8:	f043 0220 	orr.w	r2, r3, #32
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 823c 	beq.w	8004a76 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80045fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b00      	cmp	r3, #0
 8004608:	d013      	beq.n	8004632 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800460a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b00      	cmp	r3, #0
 8004614:	d105      	bne.n	8004622 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800461a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d007      	beq.n	8004632 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004638:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004646:	2b40      	cmp	r3, #64	; 0x40
 8004648:	d005      	beq.n	8004656 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800464a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800464e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004652:	2b00      	cmp	r3, #0
 8004654:	d04f      	beq.n	80046f6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fee9 	bl	800542e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004666:	2b40      	cmp	r3, #64	; 0x40
 8004668:	d141      	bne.n	80046ee <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3308      	adds	r3, #8
 8004670:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004680:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004688:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3308      	adds	r3, #8
 8004692:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004696:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800469a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1d9      	bne.n	800466a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d013      	beq.n	80046e6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046c2:	4a14      	ldr	r2, [pc, #80]	; (8004714 <HAL_UART_IRQHandler+0x2b8>)
 80046c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fc ff7d 	bl	80015ca <HAL_DMA_Abort_IT>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d017      	beq.n	8004706 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80046e0:	4610      	mov	r0, r2
 80046e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e4:	e00f      	b.n	8004706 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f9da 	bl	8004aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ec:	e00b      	b.n	8004706 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f9d6 	bl	8004aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f4:	e007      	b.n	8004706 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f9d2 	bl	8004aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004704:	e1b7      	b.n	8004a76 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004706:	bf00      	nop
    return;
 8004708:	e1b5      	b.n	8004a76 <HAL_UART_IRQHandler+0x61a>
 800470a:	bf00      	nop
 800470c:	10000001 	.word	0x10000001
 8004710:	04000120 	.word	0x04000120
 8004714:	080054fb 	.word	0x080054fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800471c:	2b01      	cmp	r3, #1
 800471e:	f040 814a 	bne.w	80049b6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004726:	f003 0310 	and.w	r3, r3, #16
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 8143 	beq.w	80049b6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 813c 	beq.w	80049b6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2210      	movs	r2, #16
 8004744:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	f040 80b5 	bne.w	80048c0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004762:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8187 	beq.w	8004a7a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004772:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004776:	429a      	cmp	r2, r3
 8004778:	f080 817f 	bcs.w	8004a7a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004782:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	f040 8086 	bne.w	80048a4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	461a      	mov	r2, r3
 80047be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80047c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1da      	bne.n	8004798 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3308      	adds	r3, #8
 80047e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3308      	adds	r3, #8
 8004802:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004806:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800480a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800480e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e1      	bne.n	80047e2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3308      	adds	r3, #8
 8004824:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800482e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004834:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3308      	adds	r3, #8
 800483e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004842:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004844:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004848:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e3      	bne.n	800481e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004874:	f023 0310 	bic.w	r3, r3, #16
 8004878:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004886:	65bb      	str	r3, [r7, #88]	; 0x58
 8004888:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800488c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e4      	bne.n	8004864 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fc fe3a 	bl	8001518 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	4619      	mov	r1, r3
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f8fb 	bl	8004ab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048be:	e0dc      	b.n	8004a7a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048da:	b29b      	uxth	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80ce 	beq.w	8004a7e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80048e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 80c9 	beq.w	8004a7e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004900:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800490e:	647b      	str	r3, [r7, #68]	; 0x44
 8004910:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004914:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800491c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e4      	bne.n	80048ec <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3308      	adds	r3, #8
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	623b      	str	r3, [r7, #32]
   return(result);
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004938:	f023 0301 	bic.w	r3, r3, #1
 800493c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3308      	adds	r3, #8
 8004946:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800494a:	633a      	str	r2, [r7, #48]	; 0x30
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e1      	bne.n	8004922 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	e853 3f00 	ldrex	r3, [r3]
 800497e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0310 	bic.w	r3, r3, #16
 8004986:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004994:	61fb      	str	r3, [r7, #28]
 8004996:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	69b9      	ldr	r1, [r7, #24]
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	617b      	str	r3, [r7, #20]
   return(result);
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e4      	bne.n	8004972 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049ac:	4619      	mov	r1, r3
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f880 	bl	8004ab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049b4:	e063      	b.n	8004a7e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80049b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00e      	beq.n	80049e0 <HAL_UART_IRQHandler+0x584>
 80049c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d008      	beq.n	80049e0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80049d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 fdcf 	bl	800557c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049de:	e051      	b.n	8004a84 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80049e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d014      	beq.n	8004a16 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80049ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d105      	bne.n	8004a04 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80049f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d03a      	beq.n	8004a82 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	4798      	blx	r3
    }
    return;
 8004a14:	e035      	b.n	8004a82 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <HAL_UART_IRQHandler+0x5da>
 8004a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fd79 	bl	8005526 <UART_EndTransmit_IT>
    return;
 8004a34:	e026      	b.n	8004a84 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <HAL_UART_IRQHandler+0x5fa>
 8004a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fda8 	bl	80055a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a54:	e016      	b.n	8004a84 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d010      	beq.n	8004a84 <HAL_UART_IRQHandler+0x628>
 8004a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	da0c      	bge.n	8004a84 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fd90 	bl	8005590 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a70:	e008      	b.n	8004a84 <HAL_UART_IRQHandler+0x628>
      return;
 8004a72:	bf00      	nop
 8004a74:	e006      	b.n	8004a84 <HAL_UART_IRQHandler+0x628>
    return;
 8004a76:	bf00      	nop
 8004a78:	e004      	b.n	8004a84 <HAL_UART_IRQHandler+0x628>
      return;
 8004a7a:	bf00      	nop
 8004a7c:	e002      	b.n	8004a84 <HAL_UART_IRQHandler+0x628>
      return;
 8004a7e:	bf00      	nop
 8004a80:	e000      	b.n	8004a84 <HAL_UART_IRQHandler+0x628>
    return;
 8004a82:	bf00      	nop
  }
}
 8004a84:	37e8      	adds	r7, #232	; 0xe8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop

08004a8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad0:	b08c      	sub	sp, #48	; 0x30
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4baa      	ldr	r3, [pc, #680]	; (8004da4 <UART_SetConfig+0x2d8>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b04:	430b      	orrs	r3, r1
 8004b06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a9f      	ldr	r2, [pc, #636]	; (8004da8 <UART_SetConfig+0x2dc>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d004      	beq.n	8004b38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b34:	4313      	orrs	r3, r2
 8004b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b42:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	6812      	ldr	r2, [r2, #0]
 8004b4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b4c:	430b      	orrs	r3, r1
 8004b4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	f023 010f 	bic.w	r1, r3, #15
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a90      	ldr	r2, [pc, #576]	; (8004dac <UART_SetConfig+0x2e0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d125      	bne.n	8004bbc <UART_SetConfig+0xf0>
 8004b70:	4b8f      	ldr	r3, [pc, #572]	; (8004db0 <UART_SetConfig+0x2e4>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d81a      	bhi.n	8004bb4 <UART_SetConfig+0xe8>
 8004b7e:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <UART_SetConfig+0xb8>)
 8004b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b84:	08004b95 	.word	0x08004b95
 8004b88:	08004ba5 	.word	0x08004ba5
 8004b8c:	08004b9d 	.word	0x08004b9d
 8004b90:	08004bad 	.word	0x08004bad
 8004b94:	2301      	movs	r3, #1
 8004b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b9a:	e116      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba2:	e112      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004ba4:	2304      	movs	r3, #4
 8004ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004baa:	e10e      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004bac:	2308      	movs	r3, #8
 8004bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bb2:	e10a      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bba:	e106      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a7c      	ldr	r2, [pc, #496]	; (8004db4 <UART_SetConfig+0x2e8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d138      	bne.n	8004c38 <UART_SetConfig+0x16c>
 8004bc6:	4b7a      	ldr	r3, [pc, #488]	; (8004db0 <UART_SetConfig+0x2e4>)
 8004bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bcc:	f003 030c 	and.w	r3, r3, #12
 8004bd0:	2b0c      	cmp	r3, #12
 8004bd2:	d82d      	bhi.n	8004c30 <UART_SetConfig+0x164>
 8004bd4:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <UART_SetConfig+0x110>)
 8004bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bda:	bf00      	nop
 8004bdc:	08004c11 	.word	0x08004c11
 8004be0:	08004c31 	.word	0x08004c31
 8004be4:	08004c31 	.word	0x08004c31
 8004be8:	08004c31 	.word	0x08004c31
 8004bec:	08004c21 	.word	0x08004c21
 8004bf0:	08004c31 	.word	0x08004c31
 8004bf4:	08004c31 	.word	0x08004c31
 8004bf8:	08004c31 	.word	0x08004c31
 8004bfc:	08004c19 	.word	0x08004c19
 8004c00:	08004c31 	.word	0x08004c31
 8004c04:	08004c31 	.word	0x08004c31
 8004c08:	08004c31 	.word	0x08004c31
 8004c0c:	08004c29 	.word	0x08004c29
 8004c10:	2300      	movs	r3, #0
 8004c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c16:	e0d8      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c1e:	e0d4      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004c20:	2304      	movs	r3, #4
 8004c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c26:	e0d0      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004c28:	2308      	movs	r3, #8
 8004c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c2e:	e0cc      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004c30:	2310      	movs	r3, #16
 8004c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c36:	e0c8      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a5e      	ldr	r2, [pc, #376]	; (8004db8 <UART_SetConfig+0x2ec>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d125      	bne.n	8004c8e <UART_SetConfig+0x1c2>
 8004c42:	4b5b      	ldr	r3, [pc, #364]	; (8004db0 <UART_SetConfig+0x2e4>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c4c:	2b30      	cmp	r3, #48	; 0x30
 8004c4e:	d016      	beq.n	8004c7e <UART_SetConfig+0x1b2>
 8004c50:	2b30      	cmp	r3, #48	; 0x30
 8004c52:	d818      	bhi.n	8004c86 <UART_SetConfig+0x1ba>
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	d00a      	beq.n	8004c6e <UART_SetConfig+0x1a2>
 8004c58:	2b20      	cmp	r3, #32
 8004c5a:	d814      	bhi.n	8004c86 <UART_SetConfig+0x1ba>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <UART_SetConfig+0x19a>
 8004c60:	2b10      	cmp	r3, #16
 8004c62:	d008      	beq.n	8004c76 <UART_SetConfig+0x1aa>
 8004c64:	e00f      	b.n	8004c86 <UART_SetConfig+0x1ba>
 8004c66:	2300      	movs	r3, #0
 8004c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c6c:	e0ad      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c74:	e0a9      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004c76:	2304      	movs	r3, #4
 8004c78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c7c:	e0a5      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004c7e:	2308      	movs	r3, #8
 8004c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c84:	e0a1      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004c86:	2310      	movs	r3, #16
 8004c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c8c:	e09d      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a4a      	ldr	r2, [pc, #296]	; (8004dbc <UART_SetConfig+0x2f0>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d125      	bne.n	8004ce4 <UART_SetConfig+0x218>
 8004c98:	4b45      	ldr	r3, [pc, #276]	; (8004db0 <UART_SetConfig+0x2e4>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ca2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ca4:	d016      	beq.n	8004cd4 <UART_SetConfig+0x208>
 8004ca6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ca8:	d818      	bhi.n	8004cdc <UART_SetConfig+0x210>
 8004caa:	2b80      	cmp	r3, #128	; 0x80
 8004cac:	d00a      	beq.n	8004cc4 <UART_SetConfig+0x1f8>
 8004cae:	2b80      	cmp	r3, #128	; 0x80
 8004cb0:	d814      	bhi.n	8004cdc <UART_SetConfig+0x210>
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <UART_SetConfig+0x1f0>
 8004cb6:	2b40      	cmp	r3, #64	; 0x40
 8004cb8:	d008      	beq.n	8004ccc <UART_SetConfig+0x200>
 8004cba:	e00f      	b.n	8004cdc <UART_SetConfig+0x210>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cc2:	e082      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cca:	e07e      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004ccc:	2304      	movs	r3, #4
 8004cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cd2:	e07a      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004cd4:	2308      	movs	r3, #8
 8004cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cda:	e076      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004cdc:	2310      	movs	r3, #16
 8004cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ce2:	e072      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a35      	ldr	r2, [pc, #212]	; (8004dc0 <UART_SetConfig+0x2f4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d12a      	bne.n	8004d44 <UART_SetConfig+0x278>
 8004cee:	4b30      	ldr	r3, [pc, #192]	; (8004db0 <UART_SetConfig+0x2e4>)
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cfc:	d01a      	beq.n	8004d34 <UART_SetConfig+0x268>
 8004cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d02:	d81b      	bhi.n	8004d3c <UART_SetConfig+0x270>
 8004d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d08:	d00c      	beq.n	8004d24 <UART_SetConfig+0x258>
 8004d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d0e:	d815      	bhi.n	8004d3c <UART_SetConfig+0x270>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <UART_SetConfig+0x250>
 8004d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d18:	d008      	beq.n	8004d2c <UART_SetConfig+0x260>
 8004d1a:	e00f      	b.n	8004d3c <UART_SetConfig+0x270>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d22:	e052      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004d24:	2302      	movs	r3, #2
 8004d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d2a:	e04e      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004d2c:	2304      	movs	r3, #4
 8004d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d32:	e04a      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004d34:	2308      	movs	r3, #8
 8004d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d3a:	e046      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004d3c:	2310      	movs	r3, #16
 8004d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d42:	e042      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a17      	ldr	r2, [pc, #92]	; (8004da8 <UART_SetConfig+0x2dc>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d13a      	bne.n	8004dc4 <UART_SetConfig+0x2f8>
 8004d4e:	4b18      	ldr	r3, [pc, #96]	; (8004db0 <UART_SetConfig+0x2e4>)
 8004d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d5c:	d01a      	beq.n	8004d94 <UART_SetConfig+0x2c8>
 8004d5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d62:	d81b      	bhi.n	8004d9c <UART_SetConfig+0x2d0>
 8004d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d68:	d00c      	beq.n	8004d84 <UART_SetConfig+0x2b8>
 8004d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d6e:	d815      	bhi.n	8004d9c <UART_SetConfig+0x2d0>
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <UART_SetConfig+0x2b0>
 8004d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d78:	d008      	beq.n	8004d8c <UART_SetConfig+0x2c0>
 8004d7a:	e00f      	b.n	8004d9c <UART_SetConfig+0x2d0>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d82:	e022      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004d84:	2302      	movs	r3, #2
 8004d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d8a:	e01e      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004d8c:	2304      	movs	r3, #4
 8004d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d92:	e01a      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004d94:	2308      	movs	r3, #8
 8004d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d9a:	e016      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004d9c:	2310      	movs	r3, #16
 8004d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da2:	e012      	b.n	8004dca <UART_SetConfig+0x2fe>
 8004da4:	cfff69f3 	.word	0xcfff69f3
 8004da8:	40008000 	.word	0x40008000
 8004dac:	40013800 	.word	0x40013800
 8004db0:	40021000 	.word	0x40021000
 8004db4:	40004400 	.word	0x40004400
 8004db8:	40004800 	.word	0x40004800
 8004dbc:	40004c00 	.word	0x40004c00
 8004dc0:	40005000 	.word	0x40005000
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4aae      	ldr	r2, [pc, #696]	; (8005088 <UART_SetConfig+0x5bc>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	f040 8097 	bne.w	8004f04 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d823      	bhi.n	8004e26 <UART_SetConfig+0x35a>
 8004dde:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <UART_SetConfig+0x318>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004e09 	.word	0x08004e09
 8004de8:	08004e27 	.word	0x08004e27
 8004dec:	08004e11 	.word	0x08004e11
 8004df0:	08004e27 	.word	0x08004e27
 8004df4:	08004e17 	.word	0x08004e17
 8004df8:	08004e27 	.word	0x08004e27
 8004dfc:	08004e27 	.word	0x08004e27
 8004e00:	08004e27 	.word	0x08004e27
 8004e04:	08004e1f 	.word	0x08004e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e08:	f7fd fc58 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8004e0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e0e:	e010      	b.n	8004e32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e10:	4b9e      	ldr	r3, [pc, #632]	; (800508c <UART_SetConfig+0x5c0>)
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e14:	e00d      	b.n	8004e32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e16:	f7fd fbe3 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8004e1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e1c:	e009      	b.n	8004e32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e24:	e005      	b.n	8004e32 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 8130 	beq.w	800509a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	4a94      	ldr	r2, [pc, #592]	; (8005090 <UART_SetConfig+0x5c4>)
 8004e40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e44:	461a      	mov	r2, r3
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	4413      	add	r3, r2
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d305      	bcc.n	8004e6a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d903      	bls.n	8004e72 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e70:	e113      	b.n	800509a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	2200      	movs	r2, #0
 8004e76:	60bb      	str	r3, [r7, #8]
 8004e78:	60fa      	str	r2, [r7, #12]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	4a84      	ldr	r2, [pc, #528]	; (8005090 <UART_SetConfig+0x5c4>)
 8004e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2200      	movs	r2, #0
 8004e88:	603b      	str	r3, [r7, #0]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e94:	f7fb f9c0 	bl	8000218 <__aeabi_uldivmod>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	020b      	lsls	r3, r1, #8
 8004eaa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004eae:	0202      	lsls	r2, r0, #8
 8004eb0:	6979      	ldr	r1, [r7, #20]
 8004eb2:	6849      	ldr	r1, [r1, #4]
 8004eb4:	0849      	lsrs	r1, r1, #1
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	460c      	mov	r4, r1
 8004eba:	4605      	mov	r5, r0
 8004ebc:	eb12 0804 	adds.w	r8, r2, r4
 8004ec0:	eb43 0905 	adc.w	r9, r3, r5
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	469a      	mov	sl, r3
 8004ecc:	4693      	mov	fp, r2
 8004ece:	4652      	mov	r2, sl
 8004ed0:	465b      	mov	r3, fp
 8004ed2:	4640      	mov	r0, r8
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	f7fb f99f 	bl	8000218 <__aeabi_uldivmod>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4613      	mov	r3, r2
 8004ee0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ee8:	d308      	bcc.n	8004efc <UART_SetConfig+0x430>
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ef0:	d204      	bcs.n	8004efc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6a3a      	ldr	r2, [r7, #32]
 8004ef8:	60da      	str	r2, [r3, #12]
 8004efa:	e0ce      	b.n	800509a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f02:	e0ca      	b.n	800509a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f0c:	d166      	bne.n	8004fdc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004f0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d827      	bhi.n	8004f66 <UART_SetConfig+0x49a>
 8004f16:	a201      	add	r2, pc, #4	; (adr r2, 8004f1c <UART_SetConfig+0x450>)
 8004f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1c:	08004f41 	.word	0x08004f41
 8004f20:	08004f49 	.word	0x08004f49
 8004f24:	08004f51 	.word	0x08004f51
 8004f28:	08004f67 	.word	0x08004f67
 8004f2c:	08004f57 	.word	0x08004f57
 8004f30:	08004f67 	.word	0x08004f67
 8004f34:	08004f67 	.word	0x08004f67
 8004f38:	08004f67 	.word	0x08004f67
 8004f3c:	08004f5f 	.word	0x08004f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f40:	f7fd fbbc 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8004f44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f46:	e014      	b.n	8004f72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f48:	f7fd fbce 	bl	80026e8 <HAL_RCC_GetPCLK2Freq>
 8004f4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f4e:	e010      	b.n	8004f72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f50:	4b4e      	ldr	r3, [pc, #312]	; (800508c <UART_SetConfig+0x5c0>)
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f54:	e00d      	b.n	8004f72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f56:	f7fd fb43 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8004f5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f5c:	e009      	b.n	8004f72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f64:	e005      	b.n	8004f72 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8090 	beq.w	800509a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	4a44      	ldr	r2, [pc, #272]	; (8005090 <UART_SetConfig+0x5c4>)
 8004f80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f84:	461a      	mov	r2, r3
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f8c:	005a      	lsls	r2, r3, #1
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	085b      	lsrs	r3, r3, #1
 8004f94:	441a      	add	r2, r3
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	2b0f      	cmp	r3, #15
 8004fa4:	d916      	bls.n	8004fd4 <UART_SetConfig+0x508>
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fac:	d212      	bcs.n	8004fd4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	f023 030f 	bic.w	r3, r3, #15
 8004fb6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	8bfb      	ldrh	r3, [r7, #30]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	8bfa      	ldrh	r2, [r7, #30]
 8004fd0:	60da      	str	r2, [r3, #12]
 8004fd2:	e062      	b.n	800509a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004fda:	e05e      	b.n	800509a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d828      	bhi.n	8005036 <UART_SetConfig+0x56a>
 8004fe4:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <UART_SetConfig+0x520>)
 8004fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fea:	bf00      	nop
 8004fec:	08005011 	.word	0x08005011
 8004ff0:	08005019 	.word	0x08005019
 8004ff4:	08005021 	.word	0x08005021
 8004ff8:	08005037 	.word	0x08005037
 8004ffc:	08005027 	.word	0x08005027
 8005000:	08005037 	.word	0x08005037
 8005004:	08005037 	.word	0x08005037
 8005008:	08005037 	.word	0x08005037
 800500c:	0800502f 	.word	0x0800502f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005010:	f7fd fb54 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8005014:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005016:	e014      	b.n	8005042 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005018:	f7fd fb66 	bl	80026e8 <HAL_RCC_GetPCLK2Freq>
 800501c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800501e:	e010      	b.n	8005042 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005020:	4b1a      	ldr	r3, [pc, #104]	; (800508c <UART_SetConfig+0x5c0>)
 8005022:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005024:	e00d      	b.n	8005042 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005026:	f7fd fadb 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 800502a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800502c:	e009      	b.n	8005042 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800502e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005032:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005034:	e005      	b.n	8005042 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005040:	bf00      	nop
    }

    if (pclk != 0U)
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	2b00      	cmp	r3, #0
 8005046:	d028      	beq.n	800509a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	4a10      	ldr	r2, [pc, #64]	; (8005090 <UART_SetConfig+0x5c4>)
 800504e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005052:	461a      	mov	r2, r3
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	fbb3 f2f2 	udiv	r2, r3, r2
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	085b      	lsrs	r3, r3, #1
 8005060:	441a      	add	r2, r3
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	fbb2 f3f3 	udiv	r3, r2, r3
 800506a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	2b0f      	cmp	r3, #15
 8005070:	d910      	bls.n	8005094 <UART_SetConfig+0x5c8>
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005078:	d20c      	bcs.n	8005094 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	b29a      	uxth	r2, r3
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	60da      	str	r2, [r3, #12]
 8005084:	e009      	b.n	800509a <UART_SetConfig+0x5ce>
 8005086:	bf00      	nop
 8005088:	40008000 	.word	0x40008000
 800508c:	00f42400 	.word	0x00f42400
 8005090:	080058b4 	.word	0x080058b4
      }
      else
      {
        ret = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2201      	movs	r2, #1
 800509e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2200      	movs	r2, #0
 80050ae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	2200      	movs	r2, #0
 80050b4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80050b6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3730      	adds	r7, #48	; 0x30
 80050be:	46bd      	mov	sp, r7
 80050c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080050c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005158:	f003 0310 	and.w	r3, r3, #16
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517a:	f003 0320 	and.w	r3, r3, #32
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01a      	beq.n	80051da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051c2:	d10a      	bne.n	80051da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	605a      	str	r2, [r3, #4]
  }
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af02      	add	r7, sp, #8
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005218:	f7fb ff66 	bl	80010e8 <HAL_GetTick>
 800521c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b08      	cmp	r3, #8
 800522a:	d10e      	bne.n	800524a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800522c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f82f 	bl	800529e <UART_WaitOnFlagUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e025      	b.n	8005296 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b04      	cmp	r3, #4
 8005256:	d10e      	bne.n	8005276 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005258:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f819 	bl	800529e <UART_WaitOnFlagUntilTimeout>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e00f      	b.n	8005296 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2220      	movs	r2, #32
 800527a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b09c      	sub	sp, #112	; 0x70
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	603b      	str	r3, [r7, #0]
 80052aa:	4613      	mov	r3, r2
 80052ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ae:	e0a9      	b.n	8005404 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	f000 80a5 	beq.w	8005404 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ba:	f7fb ff15 	bl	80010e8 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d302      	bcc.n	80052d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80052ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d140      	bne.n	8005352 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052e4:	667b      	str	r3, [r7, #100]	; 0x64
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e6      	bne.n	80052d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3308      	adds	r3, #8
 8005308:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	f023 0301 	bic.w	r3, r3, #1
 8005318:	663b      	str	r3, [r7, #96]	; 0x60
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3308      	adds	r3, #8
 8005320:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005322:	64ba      	str	r2, [r7, #72]	; 0x48
 8005324:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e5      	bne.n	8005302 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2220      	movs	r2, #32
 8005342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e069      	b.n	8005426 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d051      	beq.n	8005404 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800536a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800536e:	d149      	bne.n	8005404 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005378:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	e853 3f00 	ldrex	r3, [r3]
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800538e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005398:	637b      	str	r3, [r7, #52]	; 0x34
 800539a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800539e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053a0:	e841 2300 	strex	r3, r2, [r1]
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1e6      	bne.n	800537a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3308      	adds	r3, #8
 80053b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	613b      	str	r3, [r7, #16]
   return(result);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f023 0301 	bic.w	r3, r3, #1
 80053c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3308      	adds	r3, #8
 80053ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053cc:	623a      	str	r2, [r7, #32]
 80053ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	69f9      	ldr	r1, [r7, #28]
 80053d2:	6a3a      	ldr	r2, [r7, #32]
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e5      	bne.n	80053ac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e010      	b.n	8005426 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	69da      	ldr	r2, [r3, #28]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	4013      	ands	r3, r2
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	429a      	cmp	r2, r3
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	461a      	mov	r2, r3
 800541c:	79fb      	ldrb	r3, [r7, #7]
 800541e:	429a      	cmp	r2, r3
 8005420:	f43f af46 	beq.w	80052b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3770      	adds	r7, #112	; 0x70
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800542e:	b480      	push	{r7}
 8005430:	b095      	sub	sp, #84	; 0x54
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800544a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005454:	643b      	str	r3, [r7, #64]	; 0x40
 8005456:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800545a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e6      	bne.n	8005436 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3308      	adds	r3, #8
 800546e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	61fb      	str	r3, [r7, #28]
   return(result);
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800547e:	f023 0301 	bic.w	r3, r3, #1
 8005482:	64bb      	str	r3, [r7, #72]	; 0x48
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3308      	adds	r3, #8
 800548a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800548c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800548e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e3      	bne.n	8005468 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d118      	bne.n	80054da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f023 0310 	bic.w	r3, r3, #16
 80054bc:	647b      	str	r3, [r7, #68]	; 0x44
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	6979      	ldr	r1, [r7, #20]
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	613b      	str	r3, [r7, #16]
   return(result);
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e6      	bne.n	80054a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	671a      	str	r2, [r3, #112]	; 0x70
}
 80054ee:	bf00      	nop
 80054f0:	3754      	adds	r7, #84	; 0x54
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005506:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f7ff fac1 	bl	8004aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b088      	sub	sp, #32
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	e853 3f00 	ldrex	r3, [r3]
 800553a:	60bb      	str	r3, [r7, #8]
   return(result);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	461a      	mov	r2, r3
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005550:	6979      	ldr	r1, [r7, #20]
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	e841 2300 	strex	r3, r2, [r1]
 8005558:	613b      	str	r3, [r7, #16]
   return(result);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e6      	bne.n	800552e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7ff fa8c 	bl	8004a8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005574:	bf00      	nop
 8005576:	3720      	adds	r7, #32
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_UARTEx_DisableFifoMode+0x16>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e027      	b.n	800561e <HAL_UARTEx_DisableFifoMode+0x66>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2224      	movs	r2, #36	; 0x24
 80055da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0201 	bic.w	r2, r2, #1
 80055f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80055fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800563e:	2302      	movs	r3, #2
 8005640:	e02d      	b.n	800569e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2224      	movs	r2, #36	; 0x24
 800564e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0201 	bic.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f850 	bl	8005724 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e02d      	b.n	800571a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2224      	movs	r2, #36	; 0x24
 80056ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0201 	bic.w	r2, r2, #1
 80056e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f812 	bl	8005724 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005730:	2b00      	cmp	r3, #0
 8005732:	d108      	bne.n	8005746 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005744:	e031      	b.n	80057aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005746:	2308      	movs	r3, #8
 8005748:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800574a:	2308      	movs	r3, #8
 800574c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	0e5b      	lsrs	r3, r3, #25
 8005756:	b2db      	uxtb	r3, r3
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	0f5b      	lsrs	r3, r3, #29
 8005766:	b2db      	uxtb	r3, r3
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800576e:	7bbb      	ldrb	r3, [r7, #14]
 8005770:	7b3a      	ldrb	r2, [r7, #12]
 8005772:	4911      	ldr	r1, [pc, #68]	; (80057b8 <UARTEx_SetNbDataToProcess+0x94>)
 8005774:	5c8a      	ldrb	r2, [r1, r2]
 8005776:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800577a:	7b3a      	ldrb	r2, [r7, #12]
 800577c:	490f      	ldr	r1, [pc, #60]	; (80057bc <UARTEx_SetNbDataToProcess+0x98>)
 800577e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005780:	fb93 f3f2 	sdiv	r3, r3, r2
 8005784:	b29a      	uxth	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800578c:	7bfb      	ldrb	r3, [r7, #15]
 800578e:	7b7a      	ldrb	r2, [r7, #13]
 8005790:	4909      	ldr	r1, [pc, #36]	; (80057b8 <UARTEx_SetNbDataToProcess+0x94>)
 8005792:	5c8a      	ldrb	r2, [r1, r2]
 8005794:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005798:	7b7a      	ldrb	r2, [r7, #13]
 800579a:	4908      	ldr	r1, [pc, #32]	; (80057bc <UARTEx_SetNbDataToProcess+0x98>)
 800579c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800579e:	fb93 f3f2 	sdiv	r3, r3, r2
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80057aa:	bf00      	nop
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	080058cc 	.word	0x080058cc
 80057bc:	080058d4 	.word	0x080058d4

080057c0 <__libc_init_array>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	4d0d      	ldr	r5, [pc, #52]	; (80057f8 <__libc_init_array+0x38>)
 80057c4:	4c0d      	ldr	r4, [pc, #52]	; (80057fc <__libc_init_array+0x3c>)
 80057c6:	1b64      	subs	r4, r4, r5
 80057c8:	10a4      	asrs	r4, r4, #2
 80057ca:	2600      	movs	r6, #0
 80057cc:	42a6      	cmp	r6, r4
 80057ce:	d109      	bne.n	80057e4 <__libc_init_array+0x24>
 80057d0:	4d0b      	ldr	r5, [pc, #44]	; (8005800 <__libc_init_array+0x40>)
 80057d2:	4c0c      	ldr	r4, [pc, #48]	; (8005804 <__libc_init_array+0x44>)
 80057d4:	f000 f820 	bl	8005818 <_init>
 80057d8:	1b64      	subs	r4, r4, r5
 80057da:	10a4      	asrs	r4, r4, #2
 80057dc:	2600      	movs	r6, #0
 80057de:	42a6      	cmp	r6, r4
 80057e0:	d105      	bne.n	80057ee <__libc_init_array+0x2e>
 80057e2:	bd70      	pop	{r4, r5, r6, pc}
 80057e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e8:	4798      	blx	r3
 80057ea:	3601      	adds	r6, #1
 80057ec:	e7ee      	b.n	80057cc <__libc_init_array+0xc>
 80057ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f2:	4798      	blx	r3
 80057f4:	3601      	adds	r6, #1
 80057f6:	e7f2      	b.n	80057de <__libc_init_array+0x1e>
 80057f8:	080058e4 	.word	0x080058e4
 80057fc:	080058e4 	.word	0x080058e4
 8005800:	080058e4 	.word	0x080058e4
 8005804:	080058e8 	.word	0x080058e8

08005808 <memset>:
 8005808:	4402      	add	r2, r0
 800580a:	4603      	mov	r3, r0
 800580c:	4293      	cmp	r3, r2
 800580e:	d100      	bne.n	8005812 <memset+0xa>
 8005810:	4770      	bx	lr
 8005812:	f803 1b01 	strb.w	r1, [r3], #1
 8005816:	e7f9      	b.n	800580c <memset+0x4>

08005818 <_init>:
 8005818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581a:	bf00      	nop
 800581c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581e:	bc08      	pop	{r3}
 8005820:	469e      	mov	lr, r3
 8005822:	4770      	bx	lr

08005824 <_fini>:
 8005824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005826:	bf00      	nop
 8005828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582a:	bc08      	pop	{r3}
 800582c:	469e      	mov	lr, r3
 800582e:	4770      	bx	lr
